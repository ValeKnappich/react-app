{"version":3,"sources":["Paul/funny_bot.gif","../node_modules/grommet/messages sync /^/.*$","Paul/PaulsMiniGame.js","ShareComponents/popup.js","Vale/ValesMiniGame.js","Markus/components/field.jsx","Markus/components/column.jsx","Markus/components/modal.jsx","Markus/components/game.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","map","./en","./en-US","./en-US.js","./en.js","./fr","./fr-FR","./fr-FR.js","./fr.js","./he","./he.js","./icons/en","./icons/en-US","./icons/en-US.js","./icons/en.js","./icons/fr","./icons/fr-FR","./icons/fr-FR.js","./icons/fr.js","./icons/ja","./icons/ja-JP","./icons/ja-JP.js","./icons/ja.js","./icons/nl","./icons/nl.js","./icons/zh","./icons/zh-CN","./icons/zh-CN.js","./icons/zh.js","./ja","./ja-JP","./ja-JP.js","./ja.js","./nl","./nl.js","./pt","./pt-BR","./pt-BR.js","./pt.js","./ru","./ru-RU","./ru-RU.js","./ru.js","./zh","./zh-CN","./zh-CN.js","./zh.js","webpackContext","req","id","webpackContextResolve","e","Error","code","keys","Object","resolve","FIELDS","window","scenarioFlag","playerOnTurn","PaulsMiniGame","react_default","a","createElement","PaulsMiniGame_Container","Component","Container","attributes","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","tempFields","Array","i","state","fields","_this2","fieldValue","undefined","slice","className","result","onClick","action","actionKI","_this3","PaulsMiniGame_Mode_1","mode_1","_this4","PaulsMiniGame_Mode_2","mode_2","_this5","PaulsMiniGame_Mode_3","mode_3","setState","document","getElementById","style","backgroundColor","estimateBestField","b","c","tempFields2","arraybuilder2","arraybuilder1","fieldOutput","push","inputFields","ModeButtons","inputModeField1","inputModeField2","inputModeField3","nextPlayer","gifAfterGame","src","rr","alt","React","token","token2","token3","j","Mode_1","_this6","props","Mode_2","_this7","Mode_3","_this8","Popup","buttons","button","index","type","key","height","input","onSubmit","length","fontSize","whiteSpace","textAlign","message","display","width","focus","opacity","documentEventListener","addEventListener","cancelButton","click","removeEventListener","openPopup","arguments","ReactDOM","render","popup_Popup","settings","ValesMiniGame","_Component","increaseCounter","bind","assertThisInitialized","startGame","reset","gameEnd","count","lastActiveTile","lastCount","controlPanel","createRef","scoreboard","inherits","createClass","value","ValesMiniGame_ControlPanel","app","ref","justifyContent","ValesMiniGame_Field","ValesMiniGame_Scoreboard","parent","store","vale","scoreboard_entries","current","entries","countDown","start","Math","floor","random","tiles","getElementsByClassName","classList","add","disabled","buttonText","field","transition","transform","setTimeout","unmountComponentAtNode","event","preventDefault","addEntry","name","score","contains","remove","ControlPanel","setRunning","ValesMiniGame_Countdown","time","onComplete","ValesMiniGame_Counter","recursiveDraw","number","cb","context","endMsg","startButton","text","Counter","margin","Field","ValesMiniGame_Tile","tileNumber","Tile","setActive","callingTile","background","Scoreboard","sort","addHtml","addDummies","grommet","responsive","onSort","labels","sortAscending","rndm","entry","tmp_entries","entryComparator","entry1","entry2","Countdown","secs","color","setColor","newColor","Column","enabled","fieldArray","handleTurn","getLastBlanc","displayTriangleColor","resetFields","setGameArray","checkWin","setWinner","switchPlayer","getTriangleColor","components_field","Modal","winner","modal","btn","onclick","displayWinner","colorToGerman","resetAll","MarkusMiniGame","columns","playerColor","gameArray","checkVertical","checkHorizontal","checkDiagonal","console","log","classes","columnIndex","fieldIndex","counter","left","right","counterLeftUp","counterLeftDown","up","down","vertical","horizontal","diagonal","column","components_column","components_modal","App","title","src_Vale_ValesMiniGame","game","src_Paul_PaulsMiniGame","Boolean","location","hostname","match","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e3ab0b8d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/funny_bot.49631b63.gif\";","var map = {\n\t\"./en\": 115,\n\t\"./en-US\": 61,\n\t\"./en-US.js\": 61,\n\t\"./en.js\": 115,\n\t\"./fr\": 116,\n\t\"./fr-FR\": 62,\n\t\"./fr-FR.js\": 62,\n\t\"./fr.js\": 116,\n\t\"./he\": 117,\n\t\"./he.js\": 117,\n\t\"./icons/en\": 118,\n\t\"./icons/en-US\": 23,\n\t\"./icons/en-US.js\": 23,\n\t\"./icons/en.js\": 118,\n\t\"./icons/fr\": 119,\n\t\"./icons/fr-FR\": 43,\n\t\"./icons/fr-FR.js\": 43,\n\t\"./icons/fr.js\": 119,\n\t\"./icons/ja\": 120,\n\t\"./icons/ja-JP\": 63,\n\t\"./icons/ja-JP.js\": 63,\n\t\"./icons/ja.js\": 120,\n\t\"./icons/nl\": 64,\n\t\"./icons/nl.js\": 64,\n\t\"./icons/zh\": 121,\n\t\"./icons/zh-CN\": 65,\n\t\"./icons/zh-CN.js\": 65,\n\t\"./icons/zh.js\": 121,\n\t\"./ja\": 122,\n\t\"./ja-JP\": 66,\n\t\"./ja-JP.js\": 66,\n\t\"./ja.js\": 122,\n\t\"./nl\": 123,\n\t\"./nl.js\": 123,\n\t\"./pt\": 124,\n\t\"./pt-BR\": 67,\n\t\"./pt-BR.js\": 67,\n\t\"./pt.js\": 124,\n\t\"./ru\": 125,\n\t\"./ru-RU\": 68,\n\t\"./ru-RU.js\": 68,\n\t\"./ru.js\": 125,\n\t\"./zh\": 126,\n\t\"./zh-CN\": 69,\n\t\"./zh-CN.js\": 69,\n\t\"./zh.js\": 126\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 228;","import React, {Component} from 'react';\r\nimport './PaulsMiniGame.css';\r\nimport rr from './funny_bot.gif';\r\n\r\n\r\nconst FIELDS = 9; // Definiert Anzahl der Spielfelder\r\n\r\n/* Es gibt 3 Spielmodi:\r\nWenn window.scenarioFlag = 0 ist, dann ist es der Modus 2-Player\r\nWenn window.scenarioFlag = 1 ist, dann ist es normal der Modus 1-Player(You start). Nur wenn man Button 1-Player(crazy Robot starts) clickt, befindet man sich stattdessen in diesem Modus*/\r\nwindow.scenarioFlag = 1;\r\n\r\n// Definiert wer am Zug ist. Nur relevant bei 2\r\nwindow.playerOnTurn = 1; // Definiert wer am Zug ist. Nur relevant im Modus 2-Player. Bei den anderen beiden Modi ist man immer O\r\n\r\n\r\n//Enthält Hauptkomponente, die exportiert wird und somit am Bildschirm ausgegeben wird\r\nclass PaulsMiniGame extends Component {\r\n    render() {\r\n        return (\r\n            <Container  />\r\n        );\r\n    }\r\n}\r\n\r\nexport default PaulsMiniGame;\r\n\r\n\r\n// Klasse, die das gesamte Spiel enthält\r\nclass Container extends React.Component {\r\n    constructor(attributes) {\r\n        super(attributes);\r\n        //Die 3 weiteren Felder werden für die 3-Spielmodibuttons verwendet\r\n        let tempFields = new Array(FIELDS + 3);\r\n        //initialisierung des arrays, damit es als state \"übertragen\" werden kann. Initialisierung mit -1, da dies bedeutetm dass das Feld frei ist\r\n        for (let i = 0; i < 13; i++) {\r\n            tempFields[i] = -1;\r\n        }\r\n        //macht die 12 Felder zu states, mit denen dauerhaft gearbeitet, sozusagen, das Herzstück des Codes darstellen\r\n        this.state = {\r\n            fields: tempFields,\r\n        };\r\n\r\n    }\r\n\r\n    //sorgt für die Darstellung des Felds und dafür, dass es befüllt werden kann. Sorgt auch dafür, dass es nicht befüllt werden kann, wenn jemand gewonnen hat\r\n    //Der Parameter i bestimmt, welches Feld angeklickt wurde.\r\n    // Unterscheidet ob, man im Modus 2-Player ist oder gegen den Computer spielt\r\n    // Das eigentliche Beschreiben des Felds über den State wird auf die Funktion action() ausgelagert im 2-Player Modus oder auf actionKI(), falls man gegen den Computer spielt\r\n    inputFields(i) {\r\n\r\n        //lokale Kopie von den States erstellen, da dies best practice ist\r\n        let fieldValue = this.state.fields[i];\r\n        //damit in den leeren Feldern nicht -1 steht, erhalten diese für die Darstellung den Wert \"undefined\"\r\n        if (fieldValue === -1)\r\n            fieldValue = undefined;\r\n\r\n        //verhindert das Beschreiben von Feldern, wo bereits X oder O gesetzt wurde\r\n        let tempFields = this.state.fields.slice();\r\n        if (!(tempFields[i] === -1)) {\r\n            return (\r\n                <button className=\"button2\"\r\n                >{fieldValue}\r\n                </button>\r\n            );\r\n        }\r\n\r\n        //sorgt dafür, dass wenn jemand gewonnen hat,  man keine weiteren Felder beschreiben kann\r\n        if (this.result(this.state.fields.slice()) === \"X wins\" || this.result(this.state.fields.slice()) === \"O wins\"\r\n            || this.result(this.state.fields.slice()) === \"You lose xD\" || this.result(this.state.fields.slice()) === \"You win QQ\") {\r\n            return (\r\n                <button className=\"button2\"\r\n                >{fieldValue}\r\n                </button>\r\n            );\r\n        }\r\n\r\n        //Wird aufgerufen im Modus 2-PLayer\r\n        if (window.scenarioFlag === 0) {\r\n            return (\r\n                <button className=\"button2\"\r\n                    onClick={() => this.action(i)}\r\n                >{fieldValue}\r\n                </button>\r\n            );\r\n        }\r\n\r\n        //Wird aufgerufen wenn man gegen Bot spielt\r\n        if (window.scenarioFlag === 1) {\r\n            return (\r\n                <button className=\"button2\"\r\n                    onClick={() => this.actionKI(i)}\r\n                >{fieldValue}\r\n                </button>\r\n            );\r\n        }\r\n    }\r\n\r\n    //sorgt für die Darstellung des Buttons 2-Player und ruft die Funktion this.reset() bei klick auf, die diesen Modus einleitet\r\n    inputModeField1() {\r\n            return (\r\n                <Mode_1\r\n                    id=\"mode_1\"\r\n                    onClick={() => this.mode_1()}\r\n                >2-Player\r\n                </Mode_1>\r\n            );\r\n    }\r\n\r\n    //sorgt für die Darstellung des Buttons 1-Player (Crazy Robot starts) und ruft die Funktion this.mode_2() bei klick auf, die diesen Modus einleutet\r\n    inputModeField2() {\r\n        return (\r\n            <Mode_2\r\n                onClick={() => this.mode_2()}\r\n            >\r\n            </Mode_2>\r\n        );\r\n    }\r\n\r\n    //sorgt für die Darstellung des Buttons 1-Player (You start) und ruft die Funktion this.mode_3() bei klick auf, die diesen Modus einleutet\r\n    inputModeField3() {\r\n        return (\r\n            <Mode_3\r\n                onClick={() => this.mode_3()}\r\n            >\r\n            </Mode_3>\r\n        );\r\n    }\r\n\r\n    //wird durch klicken des Button eingeleitet  und leitet neues Spiel im Modus 2-Player ein\r\n    mode_1() {\r\n        //alle Felder auf -1 setzen\r\n        let tempFields = this.state.fields.slice();\r\n        for (let i = 0; i < 10; i++) {\r\n            tempFields[i] = -1\r\n        }\r\n        this.setState({\r\n            fields: tempFields,\r\n        });\r\n        //flags entsprechend anpassen\r\n        window.playerOnTurn = 0;\r\n        window.scenarioFlag = 0;\r\n        // Button des aktiven Spielmodus highlighten\r\n        document.getElementById(\"mode_1\").style.backgroundColor = \"khaki\";\r\n        document.getElementById(\"mode_2\").style.backgroundColor = \"buttonface\";\r\n        document.getElementById(\"mode_3\").style.backgroundColor = \"buttonface\";\r\n    }\r\n\r\n\r\n\r\n    //wird durch klick des  Button eingeleitet  und leitet  neues Spiel im Modus 1-Player (Crazy Robot starts) ein\r\n    mode_2() {\r\n        //alle Felder auf -1 setzen\r\n        let tempFields = this.state.fields.slice();\r\n        for (let i = 0; i < 10; i++) {\r\n            tempFields[i] = -1\r\n        }\r\n        this.setState({\r\n            fields: tempFields,\r\n        });\r\n        //flags entsprechend anpassen\r\n        window.playerOnTurn = 1;\r\n        //durch dieses setzen im \"Voraus\" wird dafür gesorgt, dass der Computer anfängt\r\n        tempFields[4] = 'X';\r\n        window.scenarioFlag = 1;\r\n        // Button des aktiven Spielmodus highlighten\r\n        document.getElementById(\"mode_1\").style.backgroundColor = \"buttonface\";\r\n        document.getElementById(\"mode_2\").style.backgroundColor = \"khaki\";\r\n        document.getElementById(\"mode_3\").style.backgroundColor = \"buttonface\";\r\n    }\r\n\r\n    //wird durch klick des  Button eingeleitet  und leitet  neues  Spiel im Modus 1-Player  (You start) ein\r\n    mode_3() {\r\n        //alle Felder auf -1 setzen\r\n        let tempFields = this.state.fields.slice();\r\n        for (let i = 0; i < 10; i++) {\r\n            tempFields[i] = -1\r\n        }\r\n        this.setState({\r\n            fields: tempFields,\r\n        });\r\n        //flags entsprechend anpassen\r\n        window.playerOnTurn = 1;\r\n        window.scenarioFlag = 1;\r\n        // Button des aktiven Spielmodus highlighten\r\n        document.getElementById(\"mode_1\").style.backgroundColor = \"buttonface\";\r\n        document.getElementById(\"mode_2\").style.backgroundColor = \"buttonface\";\r\n        document.getElementById(\"mode_3\").style.backgroundColor = \"khaki\";\r\n    }\r\n\r\n    //befüllt das Spielfeld im Modus 2-PLayer. Je nachdem welcher Spieler am Zug ist, wird X oder O gesetzt. Danach wird window.playerOnTurn umgeändert, dass im nächsten Zug der andere sein Zeichen machen kann\r\n    action(i) {\r\n        let tempFields = this.state.fields.slice();\r\n        if (window.playerOnTurn === 0) {\r\n            tempFields[i] = 'X';\r\n            window.playerOnTurn = 1;\r\n        }\r\n        else {\r\n            tempFields[i] = 'O';\r\n            window.playerOnTurn = 0;\r\n        }\r\n        //übertragen der Eingabe in den state\r\n        this.setState({\r\n            fields: tempFields,\r\n        });\r\n    }\r\n\r\n    //befüllt das Spielfeld im Modus 1-Player(You start) und 1-Player(crazy computer starts). Selber setzt man immer O. Der Computer immer X\r\n    actionKI(i) {\r\n        let tempFields = this.state.fields.slice();\r\n\r\n        //setzen der eigenen Eingabe\r\n        tempFields[i] = 'O';\r\n        this.setState({\r\n            fields: tempFields,\r\n        });\r\n\r\n        //ab hier wird ein passendes Feld für den Computer gesucht und dann gesetzt\r\n        // aufrufen der Funktion estimateBestField. mit diesen Parametern ermittelt sie, ob es ein Feld gibt, mit dem der Computer direkt gewinnen kann\r\n        let a = estimateBestField(tempFields, 'X', 'X', -1);\r\n        //wurde ein Feld gefunden, wird es nun gesetzt und die funktion beendet\r\n        if (a > 0) {\r\n            tempFields[a] = 'X';\r\n            this.setState({\r\n                fields: tempFields,\r\n            });\r\n            return;\r\n        }\r\n\r\n        // wurde oben kein passendes feld gefunden, wird die Funktion estimateBestField erneut aufgerufen. mit diesen Parametern ermittelt sie, ob es ein Feld gibt, mit dem der Spieler direkt gewinnen kann und setzt dort einen eigens Zeichen, damit der Spieler nicht gewinnt\r\n        let b = estimateBestField(tempFields, 'O', 'O', -1);\r\n        if (b > 0) {\r\n            tempFields[b] = 'X';\r\n            this.setState({\r\n                fields: tempFields,\r\n            });\r\n            return;\r\n        }\r\n\r\n        //konnte beim Aufruf der Funktion über die beiden oben genannten Fälle, kein Feld gefunden werden. Wird nun erneut die Funktion aufgerufen. Nun wird überprüft, ob man eine zweier Kette aufzubauen kann, die für einen späteren Gewinn genutzt werden kann\r\n        let c = estimateBestField(tempFields, 'X', -1, -1);\r\n        if (c > 0) {\r\n            tempFields[c] = 'X';\r\n            this.setState({\r\n                fields: tempFields,\r\n            });\r\n            return;\r\n        }\r\n\r\n        //Wenn in den obigen Fällen kein Feld gefunden wird, wird einfach das nächste freie Feld befüllt\r\n        let p = 0;\r\n        while (!(tempFields[p] === -1)) {\r\n            p++;\r\n            if (p > 8) break;\r\n        }\r\n        tempFields[p] = 'X';\r\n\r\n        this.setState({\r\n            fields: tempFields,\r\n        });\r\n    }\r\n\r\n    //Findet über window.playerOnTurn heraus wer am Zug ist und gibt einen Text dazu aus, der später gerendert wird\r\n    nextPlayer() {\r\n        if (this.result(this.state.fields.slice()))\r\n            return;\r\n        if (window.playerOnTurn === 1 && window.scenarioFlag === 1) {\r\n            return \"You are O. It is your turn\";\r\n        }\r\n        if (window.playerOnTurn === 0) {\r\n            return \"It is X his turn\";\r\n        }\r\n        if (window.playerOnTurn === 1) {\r\n            return \"It is O his turn\";\r\n        }\r\n\r\n    }\r\n\r\n\r\n    //Alle Gewinnmöglichkeiten sind in dieser Funktion eingespeichert. Sobald eine erreicht ist, ist das Spiel beendet und es wird über einen Text der Gewinner zurückgegeben\r\n    // Ermittelt auch, ob keine Züge mehr möglich sind und somit ein Patt vorliegt\r\n    // Wenn man gegen den Computer spielt wird ein anderer Text zurückgegeben\r\n    result(tempFields2) {\r\n        let tempFields = tempFields2;\r\n        if ((tempFields[0] === 'X' && tempFields[1] === 'X' && tempFields[2] === 'X')\r\n            || (tempFields[3] === 'X' && tempFields[4] === 'X' && tempFields[5] === 'X')\r\n            || (tempFields[6] === 'X' && tempFields[7] === 'X' && tempFields[8] === 'X')\r\n            || (tempFields[0] === 'X' && tempFields[3] === 'X' && tempFields[6] === 'X')\r\n            || (tempFields[1] === 'X' && tempFields[4] === 'X' && tempFields[7] === 'X')\r\n            || (tempFields[2] === 'X' && tempFields[5] === 'X' && tempFields[8] === 'X')\r\n            || (tempFields[0] === 'X' && tempFields[4] === 'X' && tempFields[8] === 'X')\r\n            || (tempFields[2] === 'X' && tempFields[4] === 'X' && tempFields[6] === 'X')) {\r\n            if (window.scenarioFlag === 1) {\r\n                return \"You lose xD\";\r\n            }\r\n            return \"X wins\";\r\n        }\r\n\r\n        if ((tempFields[0] === 'O' && tempFields[1] === 'O' && tempFields[2] === 'O')\r\n            || (tempFields[3] === 'O' && tempFields[4] === 'O' && tempFields[5] === 'O')\r\n            || (tempFields[6] === 'O' && tempFields[7] === 'O' && tempFields[8] === 'O')\r\n            || (tempFields[0] === 'O' && tempFields[3] === 'O' && tempFields[6] === 'O')\r\n            || (tempFields[1] === 'O' && tempFields[4] === 'O' && tempFields[7] === 'O')\r\n            || (tempFields[2] === 'O' && tempFields[5] === 'O' && tempFields[8] === 'O')\r\n            || (tempFields[0] === 'O' && tempFields[4] === 'O' && tempFields[8] === 'O')\r\n            || (tempFields[2] === 'O' && tempFields[4] === 'O' && tempFields[6] === 'O')) {\r\n            if (window.scenarioFlag === 1) {\r\n                return \"You win QQ\";\r\n            }\r\n            return \"O wins\";\r\n        }\r\n\r\n        if ((tempFields[0] !== -1 && tempFields[1] !== -1 && tempFields[2] !== -1)\r\n            && (tempFields[3] !== -1 && tempFields[4] !== -1 && tempFields[5] !== -1)\r\n            && (tempFields[6] !== -1 && tempFields[7] !== -1 && tempFields[8] !== -1)\r\n        ) {\r\n            if (window.scenarioFlag === 1) {\r\n                return \"Nobody wins -  Cannot beat me, cannot beat me, lalalalalalala\";\r\n            }\r\n            return \"Nobody wins. Congrats Nobody\";\r\n        }\r\n    }\r\n\r\n    //Diese Funktion rendert alles und sorgt somit für die Ausgabe. Sie sorgt auch dafür, dass bei jeder Änderung an der Ausgabe, dies sofort auf der WEbseite angezeigt wird\r\n    render() {\r\n        //Feld wird über einen Table aufgebaut. Dieser wird über 3 arrays zusammengepusht. Könnte theoretisch leicht skaliert weden\r\n        let arraybuilder2 = [];\r\n        let arraybuilder1 = [];\r\n        let fieldOutput = []; // die ist das letzte, sprich das Ausgabearray\r\n\r\n        for (let i = 0; i < FIELDS / 3; i++) {\r\n            arraybuilder1.push(<td className=\"tables\">\r\n                {this.inputFields(i * 3)}\r\n            </td>)\r\n            arraybuilder1.push(<td className=\"tables\">\r\n                {this.inputFields(i * 3 + 1)}\r\n            </td>)\r\n            arraybuilder1.push(<td className=\"tables\">\r\n                {this.inputFields(i * 3 + 2)}\r\n            </td>)\r\n\r\n            arraybuilder2.push(<tr className=\"tables\">{arraybuilder1}</tr>);\r\n            arraybuilder1 = [];\r\n        }\r\n\r\n        //fieldOutput enthält nun das gesamte Spielfeld\r\n        fieldOutput.push(<table className=\"tables\">{arraybuilder2}</table>);\r\n\r\n        //Zusammenbauen von den 3 Spieldmodi-Buttons zu einem Feld\r\n        let ModeButtons = [];\r\n        ModeButtons.push(<div>\r\n            <div>{this.inputModeField1(9)} {this.inputModeField2(10)} {this.inputModeField3(11)}</div>\r\n        </div>)\r\n\r\n        //Ermittlung wer am Zug ist und ob jemand gewonnen hat. Ausgabe ob jemand gewonnen hat, erfolgt nur, wenn das Spielt beendet ist - in diesem Fall wird auch nicht mehr ausgegeben, wer am Zug ist\r\n        let result = this.result(this.state.fields.slice())\r\n        let nextPlayer = this.nextPlayer();\r\n\r\n        //gif wird ausgegeben, wenn man gegen den PC verliert oder patt spielt\r\n        let gifAfterGame = [];\r\n        if (result === \"You lose xD\" || result === \"Nobody wins -  Cannot beat me, cannot beat me, lalalalalalala\")\r\n            gifAfterGame.push(<img className=\"image\" src={rr} alt=\"logo\"/>);\r\n\r\n        //Rückgabe der tatsächlichen Ausgabe\r\n        return (<div className=\"PaulsBody\">\r\n            <h1 className=\"Paulh1\">Tic-Tac-Toe</h1>\r\n            <div> {fieldOutput}</div>\r\n            <div className=\"textResult\">{result}</div>\r\n            <div className=\"textNextPlayer\">{nextPlayer}</div>\r\n            <div className=\"positionModeButtons\"><br/>{ModeButtons}<br/></div>\r\n            {gifAfterGame}\r\n        </div>);\r\n    }\r\n}\r\n\r\n\r\n//über diese Funktion wird ein passendes Feld ermittelt. Der Parameter tempFields2 ist eine Kopie des aktuellen Felds.\r\n//Die 3 Token werden genutzt um verschiedene Szenarien aufzubauen. Sprich ist  token='X' und token2 = 'X' und der token3 ='-1' werden alle möglichen Möglichkeiten\r\n// durchitiert und nach so einem Szenario gesucht. Sobald es gefunden wurde, wird das zu befüllende Feld zurückgegeben (so ein Feld würde zu einem Gewinn führen).\r\n// Sucht man mit token='X' und token2 = '-1' und der token3 ='-1' so sucht man z.B. nach einem 'X' belegten Feld, wo eine 3er Kette für einen Sieg noch aufgebaut werden kann (auch wenn zwei Möglichkeitne bestehen, wird nur ein Feld zurückgegeben.)\r\n// wird kein passendes Feld gefunden, wird \"-1\" zurückgegeben und es ist bekannt, dass es ein Feld unter dem Szenario nicht vorhanden ist\r\nfunction estimateBestField(tempFields2, token, token2, token3) {\r\n    let j = 0;\r\n    let tempFields = tempFields2;\r\n    if (tempFields[4] === -1) {\r\n        return 4;\r\n    }\r\n    while (true) {\r\n        if (tempFields[j] === token && tempFields[j + 1] === token2 && tempFields[j + 2] === token3) {\r\n            return (j + 2);\r\n        }\r\n        j = j + 3;\r\n        if (j === 9)\r\n            break;\r\n    }\r\n\r\n    j = 0;\r\n    while (true) {\r\n        if (tempFields[j] === token && tempFields[j + 2] === token2 && tempFields[j + 1] === token3) {\r\n            return j + 1;\r\n        }\r\n        j = j + 3;\r\n        if (j === 9)\r\n            break;\r\n    }\r\n\r\n    j = 0;\r\n    while (true) {\r\n        if (tempFields[j + 1] === token && tempFields[j + 2] === token2 && tempFields[j] === token3) {\r\n            return j;\r\n        }\r\n        j = j + 3;\r\n        if (j === 9)\r\n            break;\r\n    }\r\n\r\n    j = 0;\r\n    while (true) {\r\n        if (tempFields[j] === token && tempFields[j + 3] === token2 && tempFields[j + 6] === token3) {\r\n            return j + 6;\r\n        }\r\n        j++;\r\n        if (j === 3)\r\n            break;\r\n    }\r\n\r\n    j = 3;\r\n    while (true) {\r\n        if (tempFields[j] === token && tempFields[j + 3] === token2 && tempFields[j - 3] === token3) {\r\n            return j - 3;\r\n        }\r\n        j++;\r\n        if (j === 6)\r\n            break;\r\n    }\r\n\r\n    j = 6;\r\n    while (true) {\r\n        if (tempFields[j] === token && tempFields[j - 6] === token2 && tempFields[j - 3] === token3) {\r\n            return j - 3;\r\n        }\r\n        j++;\r\n        if (j === 9)\r\n            break;\r\n    }\r\n\r\n    if (tempFields[0] === token && tempFields[4] === token2 && tempFields[8] === token3) {\r\n        return 8;\r\n    }\r\n    if (tempFields[4] === token && tempFields[8] === token2 && tempFields[0] === token3) {\r\n        return 0;\r\n    }\r\n    if (tempFields[0] === token && tempFields[8] === token2 && tempFields[4] === token3) {\r\n        return 4;\r\n    }\r\n    if (tempFields[2] === token && tempFields[4] === token2 && tempFields[6] === token3) {\r\n        return 6;\r\n    }\r\n    if (tempFields[2] === token && tempFields[6] === token2 && tempFields[4] === token3) {\r\n        return 4;\r\n    }\r\n    if (tempFields[6] === token && tempFields[4] === token2 && tempFields[2] === token3) {\r\n        return 2;\r\n    }\r\n    return -1;\r\n}\r\n\r\n//Klassenbaustein für den Spielmodus 2-Player\r\nclass Mode_1 extends React.Component {\r\n    render() {\r\n        return (\r\n            <button\r\n                id=\"mode_1\"\r\n                onClick={() => this.props.onClick()}\r\n            >\r\n                2-Player\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\n//Klassenbaustein für den Spielmodus  1-Player (Crazy Robot starts)\r\nclass Mode_2 extends React.Component {\r\n    render() {\r\n        return (\r\n            <button\r\n                id=\"mode_2\"\r\n                onClick={() => this.props.onClick()}\r\n            >\r\n                1-Player (Crazy Robot starts)\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\n//Klassenbaustein für den Spielmodus  1-Player (You start)\r\nclass Mode_3 extends React.Component {\r\n    render() {\r\n        return (\r\n            <button\r\n                id=\"mode_3\"\r\n                onClick={() => this.props.onClick()}\r\n            >\r\n                1-Player (You start)\r\n            </button>\r\n        );\r\n    }\r\n}","import React, {Component} from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport './popup.css'\r\n\r\nfunction openPopup(message, buttons, input=false) {\r\n    ReactDOM.render(<Popup message={message} buttons={buttons} input={input}/>, document.getElementById('popup_container'));\r\n}\r\n\r\nclass Popup extends Component{\r\n    render(){\r\n        //create buttons' html tags from given button information\r\n        const buttons = this.props.buttons.map((button, index)=><button type=\"button\" key={button[0]} className=\"button\" id={\"popup_button_\" + index} onClick={button[1]} style={{height: \"3rem\"}}>{button[0]}</button>);\r\n        //render input-field?\r\n        const input = this.props.input ? <input id=\"popup_input\" type=\"text\"/> : null;\r\n        return (\r\n            <form className=\"popup\" onSubmit={this.props.buttons[this.props.buttons.length-1][1]}>\r\n                <div style={{fontSize: \"larger\", whiteSpace: \"pre-wrap\", textAlign: \"center\"}}>{this.props.message}</div>\r\n                {input}\r\n                <div style={{display: 'flex', width: '100%'}}>{buttons}</div>\r\n            </form>\r\n        );\r\n    }\r\n    componentDidMount(){\r\n        const input = document.getElementById('popup_input');\r\n        if(input !== null)input.focus();    //prefocus\r\n        document.getElementById(\"root\").style.opacity = \"0.3\";\r\n        //Make popup close, when clicked next to the popup\r\n        //click Listener on document\r\n        this.documentEventListener = document.getElementById('root').addEventListener(\"click\", ()=>{\r\n            const cancelButton = document.getElementById('popup_button_0');\r\n            if(cancelButton!==null)cancelButton.click();\r\n        });\r\n    }\r\n    componentWillUnmount(){\r\n        document.getElementById('root').style.opacity = 1;\r\n        document.removeEventListener(\"click\",this.documentEventListener);\r\n    }\r\n}\r\n\r\nexport default openPopup;","//React\r\nimport React, { Component } from 'react';\r\nimport './ValesMiniGame.css';\r\n//Components\r\nimport {Table, TableRow, TableHeader} from 'grommet';\r\nimport '../../node_modules/grommet-css';\r\nimport ReactDOM from \"react-dom\";\r\nimport openPopup from '../ShareComponents/popup'\r\n\r\nconst settings = {dimension: 6};\r\n\r\n\r\nexport class ValesMiniGame extends Component {\r\n    constructor(){\r\n        super();\r\n        this.increaseCounter = this.increaseCounter.bind(this);\r\n        this.startGame = this.startGame.bind(this);\r\n        this.reset = this.reset.bind(this);\r\n        this.gameEnd = this.gameEnd.bind(this);\r\n        this.state = {count: 0, lastActiveTile: 0, lastCount: 0};\r\n        this.controlPanel = React.createRef();\r\n        this.scoreboard = React.createRef();\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <button className=\"button\" onClick={this.gameEnd}>Popup</button>\r\n                <ControlPanel app={this} ref={this.controlPanel} startGame={this.startGame} count={this.state.count} />\r\n                <div className=\"MainView\">\r\n                    <div style={{display: 'flex', justifyContent: 'center', width: '100%'}}>\r\n                        <Field app={this} increaseCounter={this.increaseCounter}/>\r\n                    </div>\r\n                    <Scoreboard ref={this.scoreboard}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    componentDidMount(){    //Load state from parent Store\r\n        if(this.props.parent.store.vale.scoreboard_entries !== null) {\r\n            this.scoreboard.current.setState({entries: this.props.parent.store.vale.scoreboard_entries});\r\n        }\r\n    }\r\n    componentWillUnmount(){ //Save state to parent Store\r\n        this.props.parent.store.vale.scoreboard_entries = this.scoreboard.current.state.entries;\r\n    }\r\n    increaseCounter(){\r\n        this.setState({count: this.state.count+1});\r\n    }\r\n    startGame(){\r\n        this.controlPanel.current.countDown.current.start();\r\n        //Next yellow tile\r\n        let i = Math.floor(Math.random() * 8);\r\n        let tiles = document.getElementsByClassName(\"Tile\");\r\n        tiles[i].classList.add(\"activeTile\");\r\n        //Re-enable all tiles\r\n        for(let i=0;i<settings.dimension*settings.dimension; i++){\r\n            tiles[i].disabled = false;\r\n        }\r\n    }\r\n    gameEnd(){\r\n        //Disable tiles\r\n        const tiles = document.getElementsByClassName('Tile');\r\n        for(let i=0;i<settings.dimension*settings.dimension; i++){\r\n            tiles[i].disabled = true;\r\n        }\r\n        this.controlPanel.current.setState({buttonText: \"Game Over!\"});\r\n        //Popup\r\n        this.setState({lastCount: this.state.count});\r\n        openPopup(\"You reached \" + this.state.lastCount + \" Points!\\nEnter your name\",\r\n            [[\"Cancel\",()=>{\r\n                //Animation\r\n                const field = document.getElementById('Field');\r\n                field.style.transition = \"transform 1s ease-in-out\";\r\n                field.style.transform = \"rotateX(360deg)\";\r\n                setTimeout(()=>{field.style.transition = \"\";field.style.transform = \"rotateX(0deg)\"},1000);\r\n                //popup\r\n                ReactDOM.unmountComponentAtNode(document.getElementById('popup_container'));\r\n            }],[\"Submit\",(event)=>{\r\n                //Animation\r\n                const field = document.getElementById('Field');\r\n                field.style.transition = \"transform 1s ease-in-out\";\r\n                field.style.transform = \"rotateX(360deg)\";\r\n                setTimeout(()=>{field.style.transition = \"\";field.style.transform = \"rotateX(0deg)\"},1000);\r\n                //popup\r\n                event.preventDefault();\r\n                const input = document.getElementById('popup_input');\r\n                this.scoreboard.current.addEntry({name: input.value === \"\" ? \"Unnamed\" : input.value, score: this.state.lastCount});\r\n                ReactDOM.unmountComponentAtNode(document.getElementById('popup_container'));\r\n            }]],true);\r\n        this.reset();\r\n    }\r\n    reset(){\r\n        //Deactivate active Tile\r\n        let tiles = document.getElementsByClassName('Tile');\r\n        for(let i=0; i<settings.dimension*settings.dimension; i++){\r\n            if(tiles[i].classList.contains('activeTile')){\r\n                tiles[i].classList.remove('activeTile');\r\n            }\r\n        }\r\n        //Reset counter\r\n        this.setState({count: 0});\r\n        //Reset Button\r\n        document.getElementById('startButton').disabled = false;\r\n        this.controlPanel.current.setState({buttonText: \"Start Game!\"});\r\n        //Reset timer\r\n        this.controlPanel.current.countDown.current.reset();\r\n    }\r\n}\r\n\r\nclass ControlPanel extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {buttonText: \"Start Game!\"};\r\n        this.setRunning = this.setRunning.bind(this);\r\n        this.countDown = React.createRef();\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"ControlPanel\">\r\n                <input type=\"button\" id=\"startButton\" className=\"ControlPanelChild button important\" onClick={this.setRunning} value={this.state.buttonText} />\r\n                <div className=\"ControlPanelChild\"><p className=\"headline\">Time<Countdown ref={this.countDown} time={10} onComplete={this.props.app.gameEnd}/></p></div>\r\n                <div className=\"ControlPanelChild\"><p className=\"headline\">Points<Counter count={this.props.count} /></p></div>\r\n            </div>\r\n        );\r\n    }\r\n    setRunning(){   //Wrapper-function for the Countdown\r\n        this.recursiveDraw(3, this.props.startGame , this, \"Game Running!\");\r\n    }\r\n    recursiveDraw(number, cb, context, endMsg){     //recursive Countdown\r\n        const startButton = document.getElementById('startButton');\r\n        if(startButton!=null){\r\n            startButton.disabled = true;\r\n        }\r\n        let text = number === 0 ? endMsg : number;\r\n        context.setState(() => {\r\n            return {buttonText: text};\r\n        });\r\n        if(number === 0){\r\n            cb();\r\n        }else {\r\n            setTimeout((() => {context.recursiveDraw(number - 1, cb, context, endMsg)}), 1000);\r\n        }\r\n    }\r\n}\r\n\r\nclass Counter extends Component{\r\n    render(){\r\n        return(\r\n            //Completely controlled by parent over props\r\n            <span id=\"counter\" style={{margin: \"10px\"}} className=\"important\">{this.props.count}</span>\r\n        );\r\n    }\r\n}\r\n\r\nclass Field extends Component{\r\n    constructor(){\r\n        super();\r\n        this.tiles = React.createRef();\r\n    }\r\n    render(){\r\n        let tiles = [];\r\n        let count = 1;\r\n        let i = 0;\r\n        //loop to create array with html tags, including linebreaks (hr)\r\n        while(count <= settings.dimension*settings.dimension){\r\n            if(count % settings.dimension === 1 && i!==0){\r\n                tiles[i] = <hr key={i}/>;\r\n                i++;\r\n            }\r\n            tiles[i] = <Tile ref={this.tiles.count} tileNumber={count} key={i} increaseCounter={this.props.increaseCounter} app={this.props.app}/>;\r\n            i++;\r\n            count++;\r\n        }\r\n        return(\r\n            <div id=\"Field\">\r\n                {tiles}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Tile extends Component {\r\n    constructor(){\r\n        super();\r\n        this.setActive = this.setActive.bind(this);\r\n    }\r\n    render(){\r\n        return(\r\n            <button className=\"Tile\" onClick={this.setActive} id={this.props.tileNumber} />\r\n        );\r\n    }\r\n    setActive(){\r\n        let callingTile = document.getElementById(this.props.tileNumber);\r\n        if(callingTile.classList.contains('activeTile')) {      //If yellow tile gets clicked\r\n            let tileNumber=0;\r\n            do {    //Prevent, that the active tile is the same twice in a row\r\n                tileNumber = Math.floor(Math.random() * (settings.dimension * settings.dimension-1));\r\n            }while(tileNumber === this.props.app.state.lastActiveTile);\r\n            this.props.app.state.lastActiveTile = tileNumber;\r\n            let tiles = document.getElementsByClassName('Tile');\r\n            try {\r\n                //Workaround to make animation look smooth\r\n                callingTile.style.background = \"#EFDA51\";       //Same color as activeTile\r\n                callingTile.classList.remove('activeTile');\r\n                setTimeout(()=>{\r\n                    let callingTile = document.getElementById(this.props.tileNumber);\r\n                    callingTile.style.transform = \"\";\r\n                    callingTile.style.background = \"#466496\";\r\n                },300);            //Half of the time defined in css property transition, so the color changes in the middle of the animation\r\n                callingTile.style.transform = \"rotateX(180deg)\";\r\n                tiles[tileNumber+1].classList.add(\"activeTile\");\r\n                this.props.increaseCounter();\r\n            }catch(e){}\r\n        }\r\n    }\r\n}\r\n\r\nclass Scoreboard extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {entries: []};\r\n        this.addEntry = this.addEntry.bind(this);\r\n        this.sort = this.sort.bind(this);\r\n        this.addHtml = this.addHtml.bind(this);\r\n        this.addDummies = this.addDummies.bind(this);\r\n    }\r\n    render(){\r\n        let entries = []; //local array for render function\r\n        for(let i=0; i<this.state.entries.length; i++){\r\n            entries[i] = this.addHtml(this.state.entries[i],i); //entries including html tags\r\n        }\r\n        return(\r\n            <div className=\"Scoreboard\">\r\n                <p className=\"headline\">Highscores</p>\r\n                <Table responsive={false}>\r\n                    <TableHeader onSort={this.sort} labels={['Name','Score']} sortAscending={false}/>\r\n                    <tbody>\r\n                    {entries}\r\n                    </tbody>\r\n                </Table>\r\n                {/*<input type=\"button\" onClick={this.addDummies} value=\"Insert dummies\"/>*/}\r\n            </div>\r\n        );\r\n    }\r\n    addDummies(){       //Testing function\r\n        let rndm = Math.floor(Math.random()*20);\r\n        this.addEntry({name: \"P1\", score: rndm});\r\n        this.addEntry({name: \"P2\", score: 2*rndm});\r\n        this.addEntry({name: \"P3\", score: 3*rndm});\r\n    }\r\n    addHtml(entry, key){\r\n        return <TableRow key={key}><td>{entry.name}</td><td>{entry.score}</td></TableRow>;\r\n    }\r\n    addEntry(entry){\r\n        let tmp_entries = this.state.entries == null ? [] : this.state.entries;\r\n        tmp_entries.push({name: entry.name, score: entry.score});\r\n        this.sort();\r\n        this.setState({entries: tmp_entries});\r\n    }\r\n    sort(){\r\n        let tmp_entries = this.state.entries == null ? [] : this.state.entries;\r\n        tmp_entries.sort(this.entryComparator);\r\n        this.setState({entries: tmp_entries});\r\n    }\r\n    entryComparator(entry1, entry2){        //Deciding algorithm for sort\r\n        if(entry1.score > entry2.score)return -1;\r\n        else if(entry1.score < entry2.score)return 1;\r\n        else return 0;\r\n    }\r\n}\r\n\r\nclass Countdown extends Component{\r\n    constructor(props){\r\n        super();\r\n        this.state = {secs: props.time};\r\n        this.countDown = this.countDown.bind(this);\r\n        this.start = this.start.bind(this);\r\n    }\r\n    render(){\r\n        return(\r\n            <span style={{margin: \"10px\"}} className=\"important\">{this.state.secs}</span>\r\n        );\r\n    }\r\n    countDown(){\r\n        if(this.state.secs === 1){\r\n            this.props.onComplete();\r\n        }\r\n        else{\r\n            this.setState({secs: this.state.secs-1});\r\n            setTimeout(this.countDown, 1000);\r\n        }\r\n    }\r\n    start(){\r\n        this.reset();\r\n        setTimeout(this.countDown, 1000);\r\n    }\r\n    reset(){\r\n        this.setState({secs: this.props.time});\r\n    }\r\n}\r\n\r\nexport default ValesMiniGame;","import React, { Component } from \"react\";\r\n\r\nclass Field extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = { color: \"blanc\" };\r\n    this.setColor = this.setColor.bind(this);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"field\">\r\n        <div className={this.state.color} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  setColor(newColor) {\r\n    this.setState({ color: newColor });\r\n  }\r\n}\r\n\r\nexport default Field;\r\n","import React, { Component } from \"react\";\r\nimport Field from \"./field\";\r\n\r\nclass Column extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      fields: [\r\n        { id: 0 },\r\n        { id: 1 },\r\n        { id: 2 },\r\n        { id: 3 },\r\n        { id: 4 },\r\n        { id: 5 }\r\n      ],\r\n      enabled: true\r\n    };\r\n\r\n    this.fields = [];\r\n    for (let i = 0; i <= 5; i++) {\r\n      this.fields[i] = React.createRef();\r\n    }\r\n    this.fieldArray = [];\r\n    for (let i = 0; i <= 5; i++) {\r\n      this.fieldArray[i] = \"blanc\";\r\n    }\r\n    this.handleTurn = this.handleTurn.bind(this);\r\n    this.getLastBlanc = this.getLastBlanc.bind(this);\r\n    this.displayTriangleColor = this.displayTriangleColor.bind(this);\r\n    this.resetFields = this.resetFields.bind(this);\r\n  }\r\n\r\n  resetFields() {\r\n    for (let i = 0; i <= 5; i++) {\r\n      this.fieldArray[i] = \"blanc\";\r\n      this.fields[i].current.setColor(\"blanc\");\r\n    }\r\n    this.setState({ enabled: true });\r\n  }\r\n\r\n  getLastBlanc() {\r\n    let i = 0;\r\n    for (; i <= 5; i++) {\r\n      if (this.fields[i].current.state.color !== \"blanc\") {\r\n        break;\r\n      }\r\n    }\r\n    return i - 1;\r\n  }\r\n\r\n  handleTurn() {\r\n    if (this.getLastBlanc() <= 5 && this.getLastBlanc() >= 0) {\r\n      //sets the color in the field component\r\n      this.fields[this.getLastBlanc()].current.setColor(this.props.color);\r\n\r\n      //sets the color in the game Array to compare with the rules\r\n      this.fieldArray[this.getLastBlanc()] = this.props.color;\r\n      this.props.setGameArray();\r\n\r\n      //ckeck if player wins\r\n      let win = this.props.checkWin(this.props.id, this.getLastBlanc());\r\n      if (win) {\r\n        this.props.setWinner(this.props.color);\r\n      }\r\n\r\n      //switches the player color\r\n      this.props.switchPlayer();\r\n\r\n      //enables button\r\n      if (this.getLastBlanc() === 0) {\r\n        this.setState({ enabled: false });\r\n      }\r\n    }\r\n  }\r\n\r\n  displayTriangleColor() {\r\n    let classes =\r\n      this.state.enabled === true\r\n        ? this.props.getTriangleColor()\r\n        : \"triangleButton_gray\";\r\n    return classes;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"column\">\r\n        <button\r\n          onClick={this.handleTurn}\r\n          className={this.displayTriangleColor()}\r\n          id={this.props.id}\r\n        />\r\n        {this.state.fields.map(field => (\r\n          <Field\r\n            ref={this.fields[field.id]}\r\n            key={field.id}\r\n            color={field.color}\r\n            id={field.id}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Column;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Modal extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = { reset: false };\r\n    this.display = this.display.bind(this);\r\n  }\r\n\r\n  display() {\r\n    let display = this.props.winner === \"blanc\" ? \"none\" : \"block\";\r\n    return display;\r\n  }\r\n\r\n  render() {\r\n    let modal = document.getElementById(\"myModal\");\r\n    let btn = document.getElementById(\"close\");\r\n    if (this.props.winner !== \"blanc\") {\r\n      modal.style.display = \"block\";\r\n      btn.onclick = function() {\r\n        modal.style.display = \"none\";\r\n      };\r\n    }\r\n\r\n    return (\r\n      <div id=\"myModal\" className=\"modal\">\r\n        <div className={this.props.displayWinner()}>\r\n          <p>Spieler {this.props.colorToGerman()} gewinnt!!!</p>\r\n          <button onClick={this.props.resetAll} id=\"close\">\r\n            OK\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n","import React, { Component } from \"react\";\r\nimport Column from \"./column\";\r\nimport Modal from \"./modal\";\r\nimport '../basic.css';\r\n\r\nclass MarkusMiniGame extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      columns: [\r\n        { id: 0 },\r\n        { id: 1 },\r\n        { id: 2 },\r\n        { id: 3 },\r\n        { id: 4 },\r\n        { id: 5 },\r\n        { id: 6 }\r\n      ],\r\n      playerColor: \"yellow\",\r\n      winner: \"blanc\"\r\n    };\r\n    this.columns = [];\r\n    for (let i = 0; i <= 6; i++) {\r\n      this.columns[i] = React.createRef();\r\n    }\r\n    this.modal = React.createRef();\r\n    this.gameArray = [];\r\n    this.setGameArray = this.setGameArray.bind(this);\r\n    this.switchPlayer = this.switchPlayer.bind(this);\r\n    this.getTriangleColor = this.getTriangleColor.bind(this);\r\n    this.checkVertical = this.checkVertical.bind(this);\r\n    this.checkHorizontal = this.checkHorizontal.bind(this);\r\n    this.checkDiagonal = this.checkDiagonal.bind(this);\r\n    this.checkWin = this.checkWin.bind(this);\r\n    this.setWinner = this.setWinner.bind(this);\r\n    this.displayWinner = this.displayWinner.bind(this);\r\n    this.colorToGerman = this.colorToGerman.bind(this);\r\n    this.resetAll = this.resetAll.bind(this);\r\n  }\r\n\r\n  setWinner(color) {\r\n    this.setState({ winner: color });\r\n  }\r\n\r\n  setGameArray() {\r\n    for (let i = 0; i <= 6; i++) {\r\n      this.gameArray[i] = this.columns[i].current.fieldArray;\r\n    }\r\n    console.log(this.gameArray);\r\n    console.log(this.state.winner);\r\n  }\r\n\r\n  switchPlayer() {\r\n    if (this.state.playerColor === \"red\") {\r\n      this.setState({ playerColor: \"yellow\" });\r\n    }\r\n    if (this.state.playerColor === \"yellow\") {\r\n      this.setState({ playerColor: \"red\" });\r\n    }\r\n    return this.state.playerColor;\r\n  }\r\n\r\n  getTriangleColor() {\r\n    let classes = \"triangleButton_\";\r\n    classes += this.state.playerColor === \"red\" ? \"red\" : \"yellow\";\r\n    return classes;\r\n  }\r\n\r\n  displayWinner() {\r\n    let classes = \"winner_\";\r\n    classes += this.state.winner === \"red\" ? \"red\" : \"yellow\";\r\n    return classes;\r\n  }\r\n\r\n  checkVertical(columnIndex, fieldIndex) {\r\n    let color = this.gameArray[columnIndex][fieldIndex];\r\n    if (fieldIndex >= 3) {\r\n      return false;\r\n    } else {\r\n      for (let i = 1; i <= 3; i++) {\r\n        if (this.gameArray[columnIndex][fieldIndex + i] !== color) {\r\n          return false;\r\n        } else {\r\n          continue;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  checkHorizontal(columnIndex, fieldIndex) {\r\n    let color = this.gameArray[columnIndex][fieldIndex];\r\n    let counter = 1;\r\n    let left = 1;\r\n    let right = 1;\r\n    while (\r\n      columnIndex - left >= 0 &&\r\n      this.gameArray[columnIndex - left][fieldIndex] === color\r\n    ) {\r\n      counter++;\r\n      left++;\r\n    }\r\n    while (\r\n      columnIndex + right <= 6 &&\r\n      this.gameArray[columnIndex + right][fieldIndex] === color\r\n    ) {\r\n      counter++;\r\n      right++;\r\n    }\r\n    if (counter < 4) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  checkDiagonal(columnIndex, fieldIndex) {\r\n    let color = this.gameArray[columnIndex][fieldIndex];\r\n    let counterLeftUp = 1;\r\n    let counterLeftDown = 1;\r\n    let left = 1;\r\n    let right = 1;\r\n    let up = 1;\r\n    let down = 1;\r\n\r\n    //check upper left to lower right\r\n    while (\r\n      columnIndex - left >= 0 &&\r\n      fieldIndex - up >= 0 &&\r\n      this.gameArray[columnIndex - left][fieldIndex - up] === color\r\n    ) {\r\n      counterLeftUp++;\r\n      left++;\r\n      up++;\r\n    }\r\n    while (\r\n      columnIndex + right <= 6 &&\r\n      fieldIndex + down <= 5 &&\r\n      this.gameArray[columnIndex + right][fieldIndex + down] === color\r\n    ) {\r\n      counterLeftUp++;\r\n      right++;\r\n      down++;\r\n    }\r\n\r\n    // check lower left to upper right\r\n    left = 1;\r\n    right = 1;\r\n    up = 1;\r\n    down = 1;\r\n    while (\r\n      columnIndex - left >= 0 &&\r\n      fieldIndex + down <= 5 &&\r\n      this.gameArray[columnIndex - left][fieldIndex + down] === color\r\n    ) {\r\n      counterLeftDown++;\r\n      left++;\r\n      down++;\r\n    }\r\n    while (\r\n      columnIndex + right <= 6 &&\r\n      fieldIndex - up >= 0 &&\r\n      this.gameArray[columnIndex + right][fieldIndex - up] === color\r\n    ) {\r\n      counterLeftDown++;\r\n      right++;\r\n      up++;\r\n    }\r\n\r\n    if (counterLeftUp < 4 && counterLeftDown < 4) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  checkWin(columnIndex, fieldIndex) {\r\n    let vertical = this.checkVertical(columnIndex, fieldIndex);\r\n    let horizontal = this.checkHorizontal(columnIndex, fieldIndex);\r\n    let diagonal = this.checkDiagonal(columnIndex, fieldIndex);\r\n    if (vertical || horizontal || diagonal) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  colorToGerman() {\r\n    let color = this.state.winner === \"red\" ? \"Rot\" : \"Gelb\";\r\n    return color;\r\n  }\r\n\r\n  resetAll() {\r\n    this.setState({ playerColor: \"yellow\", winner: \"blanc\" });\r\n    for (let i = 0; i <= 6; i++) {\r\n      this.columns[i].current.resetFields();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"game\">\r\n        {this.state.columns.map(column => (\r\n          <Column\r\n            key={column.id}\r\n            id={column.id}\r\n            ref={this.columns[column.id]}\r\n            getTriangleColor={this.getTriangleColor}\r\n            switchPlayer={this.switchPlayer}\r\n            color={this.state.playerColor}\r\n            setGameArray={this.setGameArray}\r\n            checkWin={this.checkWin}\r\n            setWinner={this.setWinner}\r\n          />\r\n        ))}\r\n        <Modal\r\n          ref={this.modal}\r\n          resetAll={this.resetAll}\r\n          colorToGerman={this.colorToGerman}\r\n          displayWinner={this.displayWinner}\r\n          winner={this.state.winner}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MarkusMiniGame;\r\n\r\n","import React, { Component } from 'react';\r\nimport PaulsMiniGame from './Paul/PaulsMiniGame';\r\nimport './Paul/PaulsMiniGame.css';\r\nimport ValesMiniGame from './Vale/ValesMiniGame'\r\nimport './Vale/ValesMiniGame.css';\r\nimport MarkusMiniGame from './Markus/components/game';\r\n\r\nimport '../node_modules/grommet-css';\r\nimport {Tabs, Tab} from 'grommet';\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super();\r\n        this.store = {vale: {scoreboard_entries: null}};\r\n    }\r\n    render() {\r\n        return (\r\n            <Tabs id=\"Tabbar\" responsive={false}>\r\n                <Tab title=\"Vale\">\r\n                    <ValesMiniGame parent={this}/>\r\n                </Tab>\r\n                <Tab title=\"Markus\">\r\n                    <MarkusMiniGame />\r\n                </Tab>\r\n                <Tab title=\"Richard\">\r\n\r\n                </Tab>\r\n                <Tab title=\"Paul\">\r\n                    <PaulsMiniGame  />\r\n                </Tab>\r\n            </Tabs>\r\n        );\r\n    }\r\n}\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}