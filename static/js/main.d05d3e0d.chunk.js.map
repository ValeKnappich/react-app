{"version":3,"sources":["Paul/funny_bot.gif","../node_modules/grommet/messages sync /^/.*$","Paul/PaulsMiniGame.js","Vale/Scoreboard.js","Vale/ControlPanel.js","Vale/Field.js","ShareComponents/popup.js","Vale/ValesMiniGame.js","Markus/components/field.jsx","Markus/components/column.jsx","Markus/components/modal.jsx","Markus/components/game.jsx","ShareComponents/popup-tetris.js","Richard/RichardsMiniGame.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","map","./en","./en-US","./en-US.js","./en.js","./fr","./fr-FR","./fr-FR.js","./fr.js","./he","./he.js","./icons/en","./icons/en-US","./icons/en-US.js","./icons/en.js","./icons/fr","./icons/fr-FR","./icons/fr-FR.js","./icons/fr.js","./icons/ja","./icons/ja-JP","./icons/ja-JP.js","./icons/ja.js","./icons/nl","./icons/nl.js","./icons/zh","./icons/zh-CN","./icons/zh-CN.js","./icons/zh.js","./ja","./ja-JP","./ja-JP.js","./ja.js","./nl","./nl.js","./pt","./pt-BR","./pt-BR.js","./pt.js","./ru","./ru-RU","./ru-RU.js","./ru.js","./zh","./zh-CN","./zh-CN.js","./zh.js","webpackContext","req","id","webpackContextResolve","e","Error","code","keys","Object","resolve","FIELDS","window","scenarioFlag","scenarioFlagPlayAgain","playerOnTurn","src_Paul_PaulsMiniGame","react_default","a","createElement","PaulsMiniGame_Container","Component","Container","attributes","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","tempFields","Array","i","state","fields","_this2","fieldValue","undefined","className","result","onClick","action","actionKI","_this3","PaulsMiniGame_Mode1","mode1","_this4","PaulsMiniGame_Mode2","mode2","_this5","PaulsMiniGame_Mode3","mode3","_this6","PaulsMiniGame_Reset","reset","setState","document","getElementById","style","backgroundColor","estimateBestField","b","c","tempFields2","arraybuilder2","arraybuilder1","fieldOutput","push","inputFields","ModeButtons","inputModeField4","inputModeField1","inputModeField2","inputModeField3","nextPlayer","gifAfterGame","src","rr","alt","React","token","token2","token3","j","Mode1","_this7","props","Mode2","_this8","Mode3","_this9","Reset","_this10","Scoreboard","entries","addEntry","bind","assertThisInitialized","sort","addHtml","addDummies","length","grommet","responsive","onSort","labels","sortAscending","random","Math","floor","name","score","entry","key","tmp_entries","entryComparator","entry1","entry2","ControlPanel","buttonText","setRunning","countDown","createRef","type","value","ControlPanel_Countdown","ref","time","onComplete","app","gameEnd","ControlPanel_Counter","count","recursiveDraw","startGame","number","cb","context","endMsg","startButton","disabled","text","setTimeout","Counter","margin","Countdown","secs","start","Field","tiles","settings","dimension","Field_Tile","tileNumber","increaseCounter","Tile","setActive","callingTile","classList","contains","lastActiveTile","getElementsByClassName","background","remove","transform","add","Popup","buttons","button","index","height","input","onSubmit","fontSize","fontWeight","whiteSpace","textAlign","message","display","width","focus","opacity","documentEventListener","addEventListener","cancelButton","click","removeEventListener","openPopup","arguments","ReactDOM","render","popup_Popup","ValesMiniGame","lastCount","controlPanel","scoreboard","ControlPanel_ControlPanel","justifyContent","Field_Field","Scoreboard_Scoreboard","parent","store","vale","scoreboard_entries","current","field","transition","unmountComponentAtNode","event","preventDefault","color","setColor","newColor","Column","enabled","fieldArray","handleTurn","getLastBlanc","displayTriangleColor","resetFields","setGameArray","buttonEnabled","checkDraw","checkWin","setWinner","switchPlayer","getTriangleColor","components_field","Modal","winner","modal","btn","draw","onclick","displayWinner","colorToGerman","resetAll","Game","columns","playerColor","gameArray","checkVertical","checkHorizontal","checkDiagonal","console","log","classes","columnIndex","fieldIndex","counter","left","right","counterLeftUp","counterLeftDown","up","down","vertical","horizontal","diagonal","check","k","column","components_column","components_modal","popup_tetris_Popup","Board_HEIGHT","Board_WIDTH","direction","NORTH","EAST","SOUTH","WEST","movement","DOWN","LEFT","RIGHT","rotationType","AXIS","DIAGONAL","colors","I","J","L","O","Z","T","S","BLANK","defaultSquareClass","freeze","InformationBoard","time_ref","RichardsMiniGame_Time","Time","gamestatus","timer","GameBox","xValue","yValue","directionValue","distanceValue","colorValue","x","y","dir","distance","hitBottom","old","rotation","command","rotateDiagonal","rotateAxis","newBox","Square","active","bottom","coordinatex","coordinatey","RichardsMiniGame","InformationBoard_ref","boxes","Points","gameEndText","ArrowKeysReact","config","updateMoveLeft","updateMoveRight","updateRotate","updateMoveDown","rowRefs","row","RichardsMiniGame_Square","assign","events","tabIndex","updateAddShape","createRandomShape","RichardsMiniGame_InformationBoard","newBoard","pop","board","box","min","max","ceil","getRandomInt","createIshape","createJshape","createLshape","createOshape","createSshape","createTshape","newShape","gameboard","child","rotate","move","newChildren","hitBottomCheck","markAllAsBottomHit","newBoxes","addNewBoxesToBoxes","addBoxesToBoard","actionSuccess","initBoardLogic","addHitBottomBoxesToBoard","childClone","clone","doAction","hitBottomDetection","overrideOriginalsWithValues","newChild","oldChild","update","evaluate","cell","activateSquare","deactivateSqare","element","App","title","ValesMiniGame_ValesMiniGame","game","Richard_RichardsMiniGame","Boolean","location","hostname","match","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yHAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2ICAxC,IAAAC,EAAA,CACAC,OAAA,IACAC,UAAA,GACAC,aAAA,GACAC,UAAA,IACAC,OAAA,IACAC,UAAA,GACAC,aAAA,GACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,aAAA,IACAC,gBAAA,GACAC,mBAAA,GACAC,gBAAA,IACAC,aAAA,IACAC,gBAAA,GACAC,mBAAA,GACAC,gBAAA,IACAC,aAAA,IACAC,gBAAA,GACAC,mBAAA,GACAC,gBAAA,IACAC,aAAA,GACAC,gBAAA,GACAC,aAAA,IACAC,gBAAA,GACAC,mBAAA,GACAC,gBAAA,IACAC,OAAA,IACAC,UAAA,GACAC,aAAA,GACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,GACAC,aAAA,GACAC,UAAA,IACAC,OAAA,IACAC,UAAA,GACAC,aAAA,GACAC,UAAA,IACAC,OAAA,IACAC,UAAA,GACAC,aAAA,GACAC,UAAA,KAIA,SAAAC,EAAAC,GACA,IAAAC,EAAAC,EAAAF,GACA,OAAAlD,EAAAmD,GAEA,SAAAC,EAAAF,GACA,IAAAC,EAAAjD,EAAAgD,GACA,KAAAC,EAAA,IACA,IAAAE,EAAA,IAAAC,MAAA,uBAAAJ,EAAA,KAEA,MADAG,EAAAE,KAAA,mBACAF,EAEA,OAAAF,EAEAF,EAAAO,KAAA,WACA,OAAAC,OAAAD,KAAAtD,IAEA+C,EAAAS,QAAAN,EACAtD,EAAAC,QAAAkD,EACAA,EAAAE,GAAA,wRC/DMQ,EAAS,EAKfC,OAAOC,aAAe,EAGtBD,OAAOE,sBAAwB,EAG/BF,OAAOG,aAAe,MAYtBC,mLANQ,OACIC,EAAAC,EAAAC,cAACC,EAAD,aAHgBC,aAYtBC,cACF,SAAAA,EAAYC,GAAY,IAAAC,EAAAf,OAAAgB,EAAA,EAAAhB,CAAAiB,KAAAJ,GACpBE,EAAAf,OAAAkB,EAAA,EAAAlB,CAAAiB,KAAAjB,OAAAmB,EAAA,EAAAnB,CAAAa,GAAAO,KAAAH,KAAMH,IAIN,IAFA,IAAIO,EAAa,IAAIC,MAAMpB,EAAS,GAE3BqB,EAAI,EAAGA,EAAI,GAAIA,IACpBF,EAAWE,IAAM,EAND,OASpBR,EAAKS,MAAQ,CACTC,OAAQJ,GAVQN,2EAmBZQ,GAAG,IAAAG,EAAAT,KAGPU,EAAaV,KAAKO,MAAMC,OAAOF,IAEf,IAAhBI,IACAA,OAAaC,GAIjB,IADA,IAAIP,EAAa,IAAIC,MAAMpB,EAAS,GAC3BqB,EAAI,EAAGA,EAAI,GAAIA,IACpBF,EAAWE,GAAKN,KAAKO,MAAMC,OAAOF,GAEtC,OAAyB,IAAnBF,EAAWE,GAETf,EAAAC,EAAAC,cAAA,UAAQmB,UAAU,WAChBF,GAMsB,WAA5BV,KAAKa,OAAOT,IAAwD,WAA5BJ,KAAKa,OAAOT,IACrB,gBAA5BJ,KAAKa,OAAOT,IAA6D,eAA5BJ,KAAKa,OAAOT,GAExDb,EAAAC,EAAAC,cAAA,UAAQmB,UAAU,WAChBF,GAMkB,IAAxBxB,OAAOC,aAEHI,EAAAC,EAAAC,cAAA,UAAQmB,UAAU,UACVE,QAAS,kBAAML,EAAKM,OAAOT,KACjCI,GAMkB,IAAxBxB,OAAOC,aAEHI,EAAAC,EAAAC,cAAA,UAAQmB,UAAU,UACVE,QAAS,kBAAML,EAAKO,SAASV,KACnCI,QAJV,4CAWc,IAAAO,EAAAjB,KACd,OACIT,EAAAC,EAAAC,cAACyB,EAAD,CACIzC,GAAG,QACHqC,QAAS,kBAAMG,EAAKE,UAFxB,sDASU,IAAAC,EAAApB,KACd,OACIT,EAAAC,EAAAC,cAAC4B,EAAD,CACIP,QAAS,kBAAMM,EAAKE,qDAOd,IAAAC,EAAAvB,KACd,OACIT,EAAAC,EAAAC,cAAC+B,EAAD,CACIV,QAAS,kBAAMS,EAAKE,qDAOd,IAAAC,EAAA1B,KACd,OACIT,EAAAC,EAAAC,cAACkC,EAAD,CACIlD,GAAG,QACHqC,QAAS,kBAAMY,EAAKE,UAFxB,8CAYJ,IADA,IAAIxB,EAAa,IAAIC,MAAMpB,EAAS,GAC3BqB,EAAI,EAAGA,EAAI,GAAIA,IACpBF,EAAWE,GAAKN,KAAKO,MAAMC,OAAOF,GAEtC,IAAK,IAAIA,EAAI,EAAGA,EAAI,GAAIA,IACpBF,EAAWE,IAAM,EAErBN,KAAK6B,SAAS,CACVrB,OAAQJ,IAGZlB,OAAOG,aAAe,EACtBH,OAAOC,aAAe,EAEtB2C,SAASC,eAAe,SAASC,MAAMC,gBAAkB,QACzDH,SAASC,eAAe,SAASC,MAAMC,gBAAkB,aACzDH,SAASC,eAAe,SAASC,MAAMC,gBAAkB,6CAQzD,IADA,IAAI7B,EAAa,IAAIC,MAAMpB,EAAS,GAC3BqB,EAAI,EAAGA,EAAI,GAAIA,IACpBF,EAAWE,GAAKN,KAAKO,MAAMC,OAAOF,GAEtC,IAAK,IAAIA,EAAI,EAAGA,EAAI,GAAIA,IACpBF,EAAWE,IAAM,EAErBN,KAAK6B,SAAS,CACVrB,OAAQJ,IAGZlB,OAAOG,aAAe,EAEtBe,EAAW,GAAK,IAChBlB,OAAOC,aAAe,EACtBD,OAAOE,sBAAsB,EAE7B0C,SAASC,eAAe,SAASC,MAAMC,gBAAkB,aACzDH,SAASC,eAAe,SAASC,MAAMC,gBAAkB,QACzDH,SAASC,eAAe,SAASC,MAAMC,gBAAkB,6CAOzD,IADA,IAAI7B,EAAa,IAAIC,MAAMpB,EAAS,GAC3BqB,EAAI,EAAGA,EAAI,GAAIA,IACpBF,EAAWE,GAAKN,KAAKO,MAAMC,OAAOF,GAEtC,IAAK,IAAIA,EAAI,EAAGA,EAAI,GAAIA,IACpBF,EAAWE,IAAM,EAErBN,KAAK6B,SAAS,CACVrB,OAAQJ,IAGZlB,OAAOG,aAAe,EACtBH,OAAOC,aAAe,EACtBD,OAAOE,sBAAsB,EAE7B0C,SAASC,eAAe,SAASC,MAAMC,gBAAkB,aACzDH,SAASC,eAAe,SAASC,MAAMC,gBAAkB,aACzDH,SAASC,eAAe,SAASC,MAAMC,gBAAkB,wCAK9B,IAAxB/C,OAAOC,aAKiB,IAAxBD,OAAOC,cAAqD,IAA/BD,OAAOE,sBAKZ,IAAxBF,OAAOC,cAAqD,IAA/BD,OAAOE,uBAEnCY,KAAKyB,QALLzB,KAAKsB,QALLtB,KAAKmB,uCAgBNb,GAEH,IADA,IAAIF,EAAa,IAAIC,MAAMpB,EAAS,GAC3BqB,EAAI,EAAGA,EAAI,GAAIA,IACpBF,EAAWE,GAAKN,KAAKO,MAAMC,OAAOF,GAEV,IAAxBpB,OAAOG,cACPe,EAAWE,GAAK,IAChBpB,OAAOG,aAAe,IAGtBe,EAAWE,GAAK,IAChBpB,OAAOG,aAAe,GAG1BW,KAAK6B,SAAS,CACVrB,OAAQJ,qCAKPE,GAEL,IADA,IAAIF,EAAa,IAAIC,MAAMpB,EAAS,GAC3BqB,EAAI,EAAGA,EAAI,GAAIA,IACpBF,EAAWE,GAAKN,KAAKO,MAAMC,OAAOF,GAQtC,GALAF,EAAWE,GAAK,IAChBN,KAAK6B,SAAS,CACVrB,OAAQJ,IAGoB,WAA5BJ,KAAKa,OAAOT,IAAwD,WAA5BJ,KAAKa,OAAOT,IACrB,gBAA5BJ,KAAKa,OAAOT,IAA6D,eAA5BJ,KAAKa,OAAOT,GADhE,CAOA,IAAIZ,EAAI0C,EAAkB9B,EAAY,IAAK,KAAM,GAEjD,GAAIZ,EAAI,EAKJ,OAJAY,EAAWZ,GAAK,SAChBQ,KAAK6B,SAAS,CACVrB,OAAQJ,IAMhB,IAAI+B,EAAID,EAAkB9B,EAAY,IAAK,KAAM,GACjD,GAAI+B,EAAI,EAKJ,OAJA/B,EAAW+B,GAAK,SAChBnC,KAAK6B,SAAS,CACVrB,OAAQJ,IAMhB,IAAIgC,EAAIF,EAAkB9B,EAAY,KAAM,GAAI,GAChD,GAAIgC,EAAI,EAKJ,OAJAhC,EAAWgC,GAAK,SAChBpC,KAAK6B,SAAS,CACVrB,OAAQJ,IAOhB,IADA,IAAI7E,EAAI,GACoB,IAAnB6E,EAAW7E,QAChBA,EACQ,KAEZ6E,EAAW7E,GAAK,IAEhByE,KAAK6B,SAAS,CACVrB,OAAQJ,0CAOZ,IADA,IAAIA,EAAa,IAAIC,MAAMpB,EAAS,GAC3BqB,EAAI,EAAGA,EAAI,GAAIA,IACpBF,EAAWE,GAAKN,KAAKO,MAAMC,OAAOF,GAEtC,IAAIN,KAAKa,OAAOT,GAEhB,OAA4B,IAAxBlB,OAAOG,cAA8C,IAAxBH,OAAOC,aAC7B,6BAEiB,IAAxBD,OAAOG,aACA,mBAEiB,IAAxBH,OAAOG,aACA,wBADX,iCAUGgD,GACH,IAAIjC,EAAaiC,EACjB,MAAuB,MAAlBjC,EAAW,IAAgC,MAAlBA,EAAW,IAAgC,MAAlBA,EAAW,IACxC,MAAlBA,EAAW,IAAgC,MAAlBA,EAAW,IAAgC,MAAlBA,EAAW,IAC3C,MAAlBA,EAAW,IAAgC,MAAlBA,EAAW,IAAgC,MAAlBA,EAAW,IAC3C,MAAlBA,EAAW,IAAgC,MAAlBA,EAAW,IAAgC,MAAlBA,EAAW,IAC3C,MAAlBA,EAAW,IAAgC,MAAlBA,EAAW,IAAgC,MAAlBA,EAAW,IAC3C,MAAlBA,EAAW,IAAgC,MAAlBA,EAAW,IAAgC,MAAlBA,EAAW,IAC3C,MAAlBA,EAAW,IAAgC,MAAlBA,EAAW,IAAgC,MAAlBA,EAAW,IAC3C,MAAlBA,EAAW,IAAgC,MAAlBA,EAAW,IAAgC,MAAlBA,EAAW,GACrC,IAAxBlB,OAAOC,aACA,cAEJ,SAGY,MAAlBiB,EAAW,IAAgC,MAAlBA,EAAW,IAAgC,MAAlBA,EAAW,IACxC,MAAlBA,EAAW,IAAgC,MAAlBA,EAAW,IAAgC,MAAlBA,EAAW,IAC3C,MAAlBA,EAAW,IAAgC,MAAlBA,EAAW,IAAgC,MAAlBA,EAAW,IAC3C,MAAlBA,EAAW,IAAgC,MAAlBA,EAAW,IAAgC,MAAlBA,EAAW,IAC3C,MAAlBA,EAAW,IAAgC,MAAlBA,EAAW,IAAgC,MAAlBA,EAAW,IAC3C,MAAlBA,EAAW,IAAgC,MAAlBA,EAAW,IAAgC,MAAlBA,EAAW,IAC3C,MAAlBA,EAAW,IAAgC,MAAlBA,EAAW,IAAgC,MAAlBA,EAAW,IAC3C,MAAlBA,EAAW,IAAgC,MAAlBA,EAAW,IAAgC,MAAlBA,EAAW,GACrC,IAAxBlB,OAAOC,aACA,aAEJ,UAGa,IAAnBiB,EAAW,KAAgC,IAAnBA,EAAW,KAAgC,IAAnBA,EAAW,KACrC,IAAnBA,EAAW,KAAgC,IAAnBA,EAAW,KAAgC,IAAnBA,EAAW,KACxC,IAAnBA,EAAW,KAAgC,IAAnBA,EAAW,KAAgC,IAAnBA,EAAW,GAEnC,IAAxBlB,OAAOC,aACA,gEAEJ,oCAPX,mCAkBA,IAJA,IAAImD,EAAgB,GAChBC,EAAgB,GAChBC,EAAc,GAETlC,EAAI,EAAGA,EAAIrB,EAAS,EAAGqB,IAC5BiC,EAAcE,KAAKlD,EAAAC,EAAAC,cAAA,MAAImB,UAAU,UAC5BZ,KAAK0C,YAAgB,EAAJpC,KAEtBiC,EAAcE,KAAKlD,EAAAC,EAAAC,cAAA,MAAImB,UAAU,UAC5BZ,KAAK0C,YAAgB,EAAJpC,EAAQ,KAE9BiC,EAAcE,KAAKlD,EAAAC,EAAAC,cAAA,MAAImB,UAAU,UAC5BZ,KAAK0C,YAAgB,EAAJpC,EAAQ,KAG9BgC,EAAcG,KAAKlD,EAAAC,EAAAC,cAAA,MAAImB,UAAU,UAAU2B,IAC3CA,EAAgB,GAIpBC,EAAYC,KAAKlD,EAAAC,EAAAC,cAAA,SAAOmB,UAAU,UAAU0B,IAG5C,IAAIK,EAAc,GAClBA,EAAYF,KAAKlD,EAAAC,EAAAC,cAAA,WACbF,EAAAC,EAAAC,cAAA,WAAMO,KAAK4C,gBAAgB,IAAK5C,KAAK6C,gBAAgB,GAArD,IAA0D7C,KAAK8C,gBAAgB,IAA/E,IAAqF9C,KAAK+C,gBAAgB,OAK9G,IADA,IAAI3C,EAAa,IAAIC,MAAMpB,EAAS,GAC3BqB,EAAI,EAAGA,EAAI,GAAIA,IACpBF,EAAWE,GAAKN,KAAKO,MAAMC,OAAOF,GAEtC,IAAIO,EAASb,KAAKa,OAAOT,GACrB4C,EAAahD,KAAKgD,aAGlBC,EAAe,GAKnB,MAJe,gBAAXpC,GAAuC,kEAAXA,GAC5BoC,EAAaR,KAAKlD,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,QAAQsC,IAAKC,IAAIC,IAAI,UAGlD7D,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,aACnBrB,EAAAC,EAAAC,cAAA,MAAImB,UAAU,UAAd,eACArB,EAAAC,EAAAC,cAAA,eAAO+C,GACPjD,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,cAAcC,GAC7BtB,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,kBAAkBoC,GACjCzD,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,uBAAsBrB,EAAAC,EAAAC,cAAA,WAAMkD,EAAYpD,EAAAC,EAAAC,cAAA,YACtDwD,UAlZWI,IAAM1D,WA6Z9B,SAASuC,EAAkBG,EAAaiB,EAAOC,EAAQC,GACnD,IAAIC,EAAI,EACJrD,EAAaiC,EACjB,IAAuB,IAAnBjC,EAAW,GACX,OAAO,EAEX,OAAa,CACT,GAAIA,EAAWqD,KAAOH,GAASlD,EAAWqD,EAAI,KAAOF,GAAUnD,EAAWqD,EAAI,KAAOD,EACjF,OAAQC,EAAI,EAGhB,GAAU,KADVA,GAAQ,GAEJ,MAIR,IADAA,EAAI,IACS,CACT,GAAIrD,EAAWqD,KAAOH,GAASlD,EAAWqD,EAAI,KAAOF,GAAUnD,EAAWqD,EAAI,KAAOD,EACjF,OAAOC,EAAI,EAGf,GAAU,KADVA,GAAQ,GAEJ,MAIR,IADAA,EAAI,IACS,CACT,GAAIrD,EAAWqD,EAAI,KAAOH,GAASlD,EAAWqD,EAAI,KAAOF,GAAUnD,EAAWqD,KAAOD,EACjF,OAAOC,EAGX,GAAU,KADVA,GAAQ,GAEJ,MAIR,IADAA,EAAI,IACS,CACT,GAAIrD,EAAWqD,KAAOH,GAASlD,EAAWqD,EAAI,KAAOF,GAAUnD,EAAWqD,EAAI,KAAOD,EACjF,OAAOC,EAAI,EAGf,GAAU,MADVA,EAEI,MAIR,IADAA,EAAI,IACS,CACT,GAAIrD,EAAWqD,KAAOH,GAASlD,EAAWqD,EAAI,KAAOF,GAAUnD,EAAWqD,EAAI,KAAOD,EACjF,OAAOC,EAAI,EAGf,GAAU,MADVA,EAEI,MAIR,IADAA,EAAI,IACS,CACT,GAAIrD,EAAWqD,KAAOH,GAASlD,EAAWqD,EAAI,KAAOF,GAAUnD,EAAWqD,EAAI,KAAOD,EACjF,OAAOC,EAAI,EAGf,GAAU,MADVA,EAEI,MAGR,OAAIrD,EAAW,KAAOkD,GAASlD,EAAW,KAAOmD,GAAUnD,EAAW,KAAOoD,EAClE,EAEPpD,EAAW,KAAOkD,GAASlD,EAAW,KAAOmD,GAAUnD,EAAW,KAAOoD,EAClE,EAEPpD,EAAW,KAAOkD,GAASlD,EAAW,KAAOmD,GAAUnD,EAAW,KAAOoD,EAClE,EAEPpD,EAAW,KAAOkD,GAASlD,EAAW,KAAOmD,GAAUnD,EAAW,KAAOoD,EAClE,EAEPpD,EAAW,KAAOkD,GAASlD,EAAW,KAAOmD,GAAUnD,EAAW,KAAOoD,EAClE,EAEPpD,EAAW,KAAOkD,GAASlD,EAAW,KAAOmD,GAAUnD,EAAW,KAAOoD,EAClE,GAEH,MAINE,mLACO,IAAAC,EAAA3D,KACL,OACIT,EAAAC,EAAAC,cAAA,OACImB,UAAU,WAEVrB,EAAAC,EAAAC,cAAA,UACIhB,GAAG,QACHqC,QAAS,kBAAM6C,EAAKC,MAAM9C,YAF9B,oBANIuC,IAAM1D,WAkBpBkE,mLACO,IAAAC,EAAA9D,KACL,OACIT,EAAAC,EAAAC,cAAA,OACImB,UAAU,WAEVrB,EAAAC,EAAAC,cAAA,UACIhB,GAAG,QACHqC,QAAS,kBAAMgD,EAAKF,MAAM9C,YAF9B,yCANIuC,IAAM1D,WAkBpBoE,mLACO,IAAAC,EAAAhE,KACL,OACIT,EAAAC,EAAAC,cAAA,OACImB,UAAU,WAEVrB,EAAAC,EAAAC,cAAA,UACIhB,GAAG,QACHqC,QAAS,kBAAMkD,EAAKJ,MAAM9C,YAF9B,gCANIuC,IAAM1D,WAmBpBsE,mLACO,IAAAC,EAAAlE,KACL,OACIT,EAAAC,EAAAC,cAAA,OACImB,UAAU,WAEVrB,EAAAC,EAAAC,cAAA,UACIhB,GAAG,QACHqC,QAAS,kBAAMoD,EAAKN,MAAM9C,YAF9B,iBANIuC,IAAM1D,kCCjkBLwE,cACjB,SAAAA,IAAa,IAAArE,EAAA,OAAAf,OAAAgB,EAAA,EAAAhB,CAAAiB,KAAAmE,IACTrE,EAAAf,OAAAkB,EAAA,EAAAlB,CAAAiB,KAAAjB,OAAAmB,EAAA,EAAAnB,CAAAoF,GAAAhE,KAAAH,QACKO,MAAQ,CAAC6D,QAAS,IACvBtE,EAAKuE,SAAWvE,EAAKuE,SAASC,KAAdvF,OAAAwF,EAAA,EAAAxF,QAAAwF,EAAA,EAAAxF,CAAAe,KAChBA,EAAK0E,KAAO1E,EAAK0E,KAAKF,KAAVvF,OAAAwF,EAAA,EAAAxF,QAAAwF,EAAA,EAAAxF,CAAAe,KACZA,EAAK2E,QAAU3E,EAAK2E,QAAQH,KAAbvF,OAAAwF,EAAA,EAAAxF,QAAAwF,EAAA,EAAAxF,CAAAe,KACfA,EAAK4E,WAAa5E,EAAK4E,WAAWJ,KAAhBvF,OAAAwF,EAAA,EAAAxF,QAAAwF,EAAA,EAAAxF,CAAAe,KANTA,wEAUT,IADA,IAAIsE,EAAU,GACN9D,EAAE,EAAGA,EAAEN,KAAKO,MAAM6D,QAAQO,OAAQrE,IACtC8D,EAAQ9D,GAAKN,KAAKyE,QAAQzE,KAAKO,MAAM6D,QAAQ9D,GAAGA,GAEpD,OACIf,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,cACXrB,EAAAC,EAAAC,cAAA,KAAGmB,UAAU,YAAb,cACArB,EAAAC,EAAAC,cAACmF,EAAA,MAAD,CAAOC,YAAY,GACftF,EAAAC,EAAAC,cAACmF,EAAA,YAAD,CAAaE,OAAQ9E,KAAKwE,KAAMO,OAAQ,CAAC,OAAO,SAAUC,eAAe,IACzEzF,EAAAC,EAAAC,cAAA,aACC2E,0CAQb,IAAIa,EAASC,KAAKC,MAAoB,GAAdD,KAAKD,UAC7BjF,KAAKqE,SAAS,CAACe,KAAM,KAAMC,MAAOJ,IAClCjF,KAAKqE,SAAS,CAACe,KAAM,KAAMC,MAAO,EAAEJ,IACpCjF,KAAKqE,SAAS,CAACe,KAAM,KAAMC,MAAO,EAAEJ,oCAEhCK,EAAOC,GACX,OAAOhG,EAAAC,EAAAC,cAACmF,EAAA,SAAD,CAAUW,IAAKA,GAAKhG,EAAAC,EAAAC,cAAA,UAAK6F,EAAMF,MAAU7F,EAAAC,EAAAC,cAAA,UAAK6F,EAAMD,yCAEtDC,GACL,IAAIE,EAAoC,MAAtBxF,KAAKO,MAAM6D,QAAkB,GAAKpE,KAAKO,MAAM6D,QAC/DoB,EAAY/C,KAAK,CAAC2C,KAAME,EAAMF,KAAMC,MAAOC,EAAMD,QACjDrF,KAAKwE,OACLxE,KAAK6B,SAAS,CAACuC,QAASoB,mCAGxB,IAAIA,EAAoC,MAAtBxF,KAAKO,MAAM6D,QAAkB,GAAKpE,KAAKO,MAAM6D,QAC/DoB,EAAYhB,KAAKxE,KAAKyF,iBACtBzF,KAAK6B,SAAS,CAACuC,QAASoB,4CAEZE,EAAQC,GACpB,OAAGD,EAAOL,MAAQM,EAAON,OAAc,EAC/BK,EAAOL,MAAQM,EAAON,MAAa,EAC/B,SAlDoB1F,aCFnBiG,cACjB,SAAAA,IAAa,IAAA9F,EAAA,OAAAf,OAAAgB,EAAA,EAAAhB,CAAAiB,KAAA4F,IACT9F,EAAAf,OAAAkB,EAAA,EAAAlB,CAAAiB,KAAAjB,OAAAmB,EAAA,EAAAnB,CAAA6G,GAAAzF,KAAAH,QACKO,MAAQ,CAACsF,WAAY,eAC1B/F,EAAKgG,WAAahG,EAAKgG,WAAWxB,KAAhBvF,OAAAwF,EAAA,EAAAxF,QAAAwF,EAAA,EAAAxF,CAAAe,KAClBA,EAAKiG,UAAY1C,IAAM2C,YAJdlG,wEAOT,OACIP,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,gBACXrB,EAAAC,EAAAC,cAAA,SAAOwG,KAAK,SAASxH,GAAG,cAAcmC,UAAU,qCAAqCE,QAASd,KAAK8F,WAAYI,MAAOlG,KAAKO,MAAMsF,aACjItG,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,qBAAoBrB,EAAAC,EAAAC,cAAA,KAAGmB,UAAU,YAAb,OAA4BrB,EAAAC,EAAAC,cAAC0G,EAAD,CAAWC,IAAKpG,KAAK+F,UAAWM,KAAM,GAAIC,WAAYtG,KAAK4D,MAAM2C,IAAIC,YACpIjH,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,qBAAoBrB,EAAAC,EAAAC,cAAA,KAAGmB,UAAU,YAAb,SAA8BrB,EAAAC,EAAAC,cAACgH,EAAD,CAASC,MAAO1G,KAAK4D,MAAM8C,gDAKpG1G,KAAK2G,cAAc,EAAG3G,KAAK4D,MAAMgD,UAAY5G,KAAM,uDAEzC6G,EAAQC,EAAIC,EAASC,GAC/B,IAAMC,EAAcnF,SAASC,eAAe,eAC5B,MAAbkF,IACCA,EAAYC,UAAW,GAE3B,IAAIC,EAAkB,IAAXN,EAAeG,EAASH,EACnCE,EAAQlF,SAAS,WACb,MAAO,CAACgE,WAAYsB,KAEV,IAAXN,EACCC,IAEAM,WAAY,WAAOL,EAAQJ,cAAcE,EAAS,EAAGC,EAAIC,EAASC,IAAW,YA/B/CrH,aAoCpC0H,mLAEE,OAEI9H,EAAAC,EAAAC,cAAA,QAAMhB,GAAG,UAAUuD,MAAO,CAACsF,OAAQ,QAAS1G,UAAU,aAAaZ,KAAK4D,MAAM8C,cAJpE/G,aAShB4H,cACF,SAAAA,EAAY3D,GAAM,IAAAnD,EAAA,OAAA1B,OAAAgB,EAAA,EAAAhB,CAAAiB,KAAAuH,IACd9G,EAAA1B,OAAAkB,EAAA,EAAAlB,CAAAiB,KAAAjB,OAAAmB,EAAA,EAAAnB,CAAAwI,GAAApH,KAAAH,QACKO,MAAQ,CAACiH,KAAM5D,EAAMyC,MAC1B5F,EAAKsF,UAAYtF,EAAKsF,UAAUzB,KAAfvF,OAAAwF,EAAA,EAAAxF,QAAAwF,EAAA,EAAAxF,CAAA0B,KACjBA,EAAKgH,MAAQhH,EAAKgH,MAAMnD,KAAXvF,OAAAwF,EAAA,EAAAxF,QAAAwF,EAAA,EAAAxF,CAAA0B,KAJCA,wEAOd,OACIlB,EAAAC,EAAAC,cAAA,QAAMuC,MAAO,CAACsF,OAAQ,QAAS1G,UAAU,aAAaZ,KAAKO,MAAMiH,0CAI9C,IAApBxH,KAAKO,MAAMiH,KACVxH,KAAK4D,MAAM0C,cAGXtG,KAAK6B,SAAS,CAAC2F,KAAMxH,KAAKO,MAAMiH,KAAK,IACrCJ,WAAWpH,KAAK+F,UAAW,sCAI/B/F,KAAK4B,QACLwF,WAAWpH,KAAK+F,UAAW,qCAG3B/F,KAAK6B,SAAS,CAAC2F,KAAMxH,KAAK4D,MAAMyC,cA1BhB1G,aChDH+H,cACjB,SAAAA,IAAa,IAAA5H,EAAA,OAAAf,OAAAgB,EAAA,EAAAhB,CAAAiB,KAAA0H,IACT5H,EAAAf,OAAAkB,EAAA,EAAAlB,CAAAiB,KAAAjB,OAAAmB,EAAA,EAAAnB,CAAA2I,GAAAvH,KAAAH,QACK2H,MAAQtE,IAAM2C,YAFVlG,wEAST,IAJA,IAAI6H,EAAQ,GACRjB,EAAQ,EACRpG,EAAI,EAEFoG,GAASkB,EAASC,UAAUD,EAASC,WACpCnB,EAAQkB,EAASC,YAAc,GAAS,IAAJvH,IACnCqH,EAAMrH,GAAKf,EAAAC,EAAAC,cAAA,MAAI8F,IAAKjF,IACpBA,KAEJqH,EAAMrH,GAAKf,EAAAC,EAAAC,cAACqI,EAAD,CAAM1B,IAAKpG,KAAK2H,MAAMjB,MAAOqB,WAAYrB,EAAOnB,IAAKjF,EAAG0H,gBAAiBhI,KAAK4D,MAAMoE,gBAAiBzB,IAAKvG,KAAK4D,MAAM2C,MAChIjG,IACAoG,IAEJ,OACInH,EAAAC,EAAAC,cAAA,OAAKhB,GAAG,SACHkJ,UArBkBhI,aA2B7BsI,cACF,SAAAA,IAAa,IAAAxH,EAAA,OAAA1B,OAAAgB,EAAA,EAAAhB,CAAAiB,KAAAiI,IACTxH,EAAA1B,OAAAkB,EAAA,EAAAlB,CAAAiB,KAAAjB,OAAAmB,EAAA,EAAAnB,CAAAkJ,GAAA9H,KAAAH,QACKkI,UAAYzH,EAAKyH,UAAU5D,KAAfvF,OAAAwF,EAAA,EAAAxF,QAAAwF,EAAA,EAAAxF,CAAA0B,KAFRA,wEAKT,OACIlB,EAAAC,EAAAC,cAAA,UAAQmB,UAAU,OAAOE,QAASd,KAAKkI,UAAWzJ,GAAIuB,KAAK4D,MAAMmE,iDAG9D,IAAA9G,EAAAjB,KACHmI,EAAcrG,SAASC,eAAe/B,KAAK4D,MAAMmE,YACrD,GAAGI,EAAYC,UAAUC,SAAS,cAAe,CAC7C,IAAIN,EAAW,EACf,GACIA,EAAa7C,KAAKC,MAAMD,KAAKD,UAAY2C,EAASC,UAAYD,EAASC,UAAU,UAC9EE,IAAe/H,KAAK4D,MAAM2C,IAAIhG,MAAM+H,gBAC3CtI,KAAK4D,MAAM2C,IAAIhG,MAAM+H,eAAiBP,EACtC,IAAIJ,EAAQ7F,SAASyG,uBAAuB,QAC5C,IAEIJ,EAAYnG,MAAMwG,WAAa,UAC/BL,EAAYC,UAAUK,OAAO,cAC7BrB,WAAW,WACP,IAAIe,EAAcrG,SAASC,eAAed,EAAK2C,MAAMmE,YACrDI,EAAYnG,MAAM0G,UAAY,GAC9BP,EAAYnG,MAAMwG,WAAa,WACjC,KACFL,EAAYnG,MAAM0G,UAAY,kBAC9Bf,EAAMI,EAAW,GAAGK,UAAUO,IAAI,cAClC3I,KAAK4D,MAAMoE,kBACd,MAAMrJ,aA/BAgB,wBChBbiJ,mLAGE,IAAMC,EAAU7I,KAAK4D,MAAMiF,QAAQrN,IAAI,SAACsN,EAAQC,GAAT,OAAiBxJ,EAAAC,EAAAC,cAAA,UAAQwG,KAAK,SAASV,IAAKuD,EAAO,GAAIlI,UAAU,SAASnC,GAAI,gBAAkBsK,EAAOjI,QAASgI,EAAO,GAAI9G,MAAO,CAACgH,OAAQ,SAAUF,EAAO,MAE7LG,EAAQjJ,KAAK4D,MAAMqF,MAAQ1J,EAAAC,EAAAC,cAAA,SAAOhB,GAAG,cAAcwH,KAAK,SAAW,KAGzE,OADAmB,WAAW,WAAKtF,SAASyG,uBAAuB,SAAS,GAAGH,UAAUO,IAAI,kBAAoB,GAE1FpJ,EAAAC,EAAAC,cAAA,QAAMmB,UAAU,QAAQsI,SAAUlJ,KAAK4D,MAAMiF,QAAQ7I,KAAK4D,MAAMiF,QAAQlE,OAAO,GAAG,IAC9EpF,EAAAC,EAAAC,cAAA,OAAKuC,MAAO,CAACmH,SAAU,SAAUC,WAAY,OAAQC,WAAY,WAAYC,UAAW,WAAYtJ,KAAK4D,MAAM2F,SAC9GN,EACD1J,EAAAC,EAAAC,cAAA,OAAKuC,MAAO,CAACwH,QAAS,OAAQC,MAAO,SAAUZ,gDAKvD,IAAMI,EAAQnH,SAASC,eAAe,eACzB,OAAVkH,GAAeA,EAAMS,QACxB5H,SAASC,eAAe,QAAQC,MAAM2H,QAAU,MAGhD3J,KAAK4J,sBAAwB9H,SAASC,eAAe,QAAQ8H,iBAAiB,QAAS,WACnF,IAAMC,EAAehI,SAASC,eAAe,kBAC3B,OAAf+H,GAAoBA,EAAaC,yDAIxCjI,SAASC,eAAe,QAAQC,MAAM2H,QAAU,EAChD7H,SAASkI,oBAAoB,QAAQhK,KAAK4J,8BA7B9BjK,aAiCLsK,EArCf,SAAmBV,EAASV,GAAsB,IAAbI,EAAaiB,UAAAvF,OAAA,QAAAhE,IAAAuJ,UAAA,IAAAA,UAAA,GAC9CC,IAASC,OAAO7K,EAAAC,EAAAC,cAAC4K,EAAD,CAAOd,QAASA,EAASV,QAASA,EAASI,MAAOA,IAAUnH,SAASC,eAAe,qBCD3F6F,EAAW,CAACC,UAAW,GAEfyC,cACjB,SAAAA,IAAa,IAAAxK,EAAA,OAAAf,OAAAgB,EAAA,EAAAhB,CAAAiB,KAAAsK,IACTxK,EAAAf,OAAAkB,EAAA,EAAAlB,CAAAiB,KAAAjB,OAAAmB,EAAA,EAAAnB,CAAAuL,GAAAnK,KAAAH,QACKgI,gBAAkBlI,EAAKkI,gBAAgB1D,KAArBvF,OAAAwF,EAAA,EAAAxF,QAAAwF,EAAA,EAAAxF,CAAAe,KACvBA,EAAK8G,UAAY9G,EAAK8G,UAAUtC,KAAfvF,OAAAwF,EAAA,EAAAxF,QAAAwF,EAAA,EAAAxF,CAAAe,KACjBA,EAAK8B,MAAQ9B,EAAK8B,MAAM0C,KAAXvF,OAAAwF,EAAA,EAAAxF,QAAAwF,EAAA,EAAAxF,CAAAe,KACbA,EAAK0G,QAAU1G,EAAK0G,QAAQlC,KAAbvF,OAAAwF,EAAA,EAAAxF,QAAAwF,EAAA,EAAAxF,CAAAe,KACfA,EAAKS,MAAQ,CAACmG,MAAO,EAAG4B,eAAgB,EAAGiC,UAAW,GACtDzK,EAAK0K,aAAenH,IAAM2C,YAC1BlG,EAAK2K,WAAapH,IAAM2C,YARflG,wEAWT,OACIP,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,OACXrB,EAAAC,EAAAC,cAACiL,EAAD,CAAcnE,IAAKvG,KAAMoG,IAAKpG,KAAKwK,aAAc5D,UAAW5G,KAAK4G,UAAWF,MAAO1G,KAAKO,MAAMmG,QAC9FnH,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,YACXrB,EAAAC,EAAAC,cAAA,OAAKuC,MAAO,CAACwH,QAAS,OAAQmB,eAAgB,SAAUlB,MAAO,SAC3DlK,EAAAC,EAAAC,cAACmL,EAAD,CAAOrE,IAAKvG,KAAMgI,gBAAiBhI,KAAKgI,mBAE5CzI,EAAAC,EAAAC,cAACoL,EAAD,CAAYzE,IAAKpG,KAAKyK,2DAMqB,OAApDzK,KAAK4D,MAAMkH,OAAOC,MAAMC,KAAKC,oBAC5BjL,KAAKyK,WAAWS,QAAQrJ,SAAS,CAACuC,QAASpE,KAAK4D,MAAMkH,OAAOC,MAAMC,KAAKC,oEAI5EjL,KAAK4D,MAAMkH,OAAOC,MAAMC,KAAKC,mBAAqBjL,KAAKyK,WAAWS,QAAQ3K,MAAM6D,kDAGhFpE,KAAK6B,SAAS,CAAC6E,MAAO1G,KAAKO,MAAMmG,MAAM,wCAIvC1G,KAAKwK,aAAaU,QAAQnF,UAAUmF,QAAQzD,QAE5C,IAAInH,EAAI4E,KAAKC,MAAsB,EAAhBD,KAAKD,UACpB0C,EAAQ7F,SAASyG,uBAAuB,QAC5CZ,EAAMrH,GAAG8H,UAAUO,IAAI,cAEvB,IAAI,IAAIrI,EAAE,EAAEA,EAAEsH,EAASC,UAAUD,EAASC,UAAWvH,IACjDqH,EAAMrH,GAAG4G,UAAW,oCAMxB,IAHK,IAAAzG,EAAAT,KAEC2H,EAAQ7F,SAASyG,uBAAuB,QACtCjI,EAAE,EAAEA,EAAEsH,EAASC,UAAUD,EAASC,UAAWvH,IACjDqH,EAAMrH,GAAG4G,UAAW,EAExBlH,KAAKwK,aAAaU,QAAQrJ,SAAS,CAACgE,WAAY,eAEhD7F,KAAK6B,SAAS,CAAC0I,UAAWvK,KAAKO,MAAMmG,QACrCuD,EAAU,eAAiBjK,KAAKO,MAAMgK,UAAY,4BAC9C,CAAC,CAAC,SAAS,WAEP,IAAMY,EAAQrJ,SAASC,eAAe,SACtCoJ,EAAMnJ,MAAMoJ,WAAa,2BACzBD,EAAMnJ,MAAM0G,UAAY,kBACxBtB,WAAW,WAAK+D,EAAMnJ,MAAMoJ,WAAa,GAAGD,EAAMnJ,MAAM0G,UAAY,iBAAiB,KAErFyB,IAASkB,uBAAuBvJ,SAASC,eAAe,sBACzD,CAAC,SAAS,SAACuJ,GAEV,IAAMH,EAAQrJ,SAASC,eAAe,SACtCoJ,EAAMnJ,MAAMoJ,WAAa,2BACzBD,EAAMnJ,MAAM0G,UAAY,kBACxBtB,WAAW,WAAK+D,EAAMnJ,MAAMoJ,WAAa,GAAGD,EAAMnJ,MAAM0G,UAAY,iBAAiB,KAErF4C,EAAMC,iBACN,IAAMtC,EAAQnH,SAASC,eAAe,eACtCtB,EAAKgK,WAAWS,QAAQ7G,SAAS,CAACe,KAAsB,KAAhB6D,EAAM/C,MAAe,UAAY+C,EAAM/C,MAAOb,MAAO5E,EAAKF,MAAMgK,YACxGJ,IAASkB,uBAAuBvJ,SAASC,eAAe,wBACxD,GACR/B,KAAK4B,wCAKL,IADA,IAAI+F,EAAQ7F,SAASyG,uBAAuB,QACpCjI,EAAE,EAAGA,EAAEsH,EAASC,UAAUD,EAASC,UAAWvH,IAC/CqH,EAAMrH,GAAG8H,UAAUC,SAAS,eAC3BV,EAAMrH,GAAG8H,UAAUK,OAAO,cAIlCzI,KAAK6B,SAAS,CAAC6E,MAAO,IAEtB5E,SAASC,eAAe,eAAemF,UAAW,EAClDlH,KAAKwK,aAAaU,QAAQrJ,SAAS,CAACgE,WAAY,gBAEhD7F,KAAKwK,aAAaU,QAAQnF,UAAUmF,QAAQtJ,eA7FTjC,aCO5B+H,cAlBb,SAAAA,EAAY9D,GAAO,IAAA9D,EAAA,OAAAf,OAAAgB,EAAA,EAAAhB,CAAAiB,KAAA0H,IACjB5H,EAAAf,OAAAkB,EAAA,EAAAlB,CAAAiB,KAAAjB,OAAAmB,EAAA,EAAAnB,CAAA2I,GAAAvH,KAAAH,QACKO,MAAQ,CAAEiL,MAAO,SACtB1L,EAAK2L,SAAW3L,EAAK2L,SAASnH,KAAdvF,OAAAwF,EAAA,EAAAxF,QAAAwF,EAAA,EAAAxF,CAAAe,KAHCA,wEAMjB,OACEP,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,SACbrB,EAAAC,EAAAC,cAAA,OAAKmB,UAAWZ,KAAKO,MAAMiL,0CAKxBE,GACP1L,KAAK6B,SAAS,CAAE2J,MAAOE,WAfP/L,aC6GLgM,cA3Gb,SAAAA,EAAY/H,GAAO,IAAA9D,EAAAf,OAAAgB,EAAA,EAAAhB,CAAAiB,KAAA2L,IACjB7L,EAAAf,OAAAkB,EAAA,EAAAlB,CAAAiB,KAAAjB,OAAAmB,EAAA,EAAAnB,CAAA4M,GAAAxL,KAAAH,QACKO,MAAQ,CAEXC,OAAQ,CACN,CAAE/B,GAAI,GACN,CAAEA,GAAI,GACN,CAAEA,GAAI,GACN,CAAEA,GAAI,GACN,CAAEA,GAAI,GACN,CAAEA,GAAI,IAGRmN,SAAS,GAIX9L,EAAKU,OAAS,GACd,IAAK,IAAIF,EAAI,EAAGA,GAAK,EAAGA,IACtBR,EAAKU,OAAOF,GAAK+C,IAAM2C,YAGzBlG,EAAK+L,WAAa,GAClB,IAAK,IAAIvL,EAAI,EAAGA,GAAK,EAAGA,IACtBR,EAAK+L,WAAWvL,GAAK,QAxBN,OA0BjBR,EAAKgM,WAAahM,EAAKgM,WAAWxH,KAAhBvF,OAAAwF,EAAA,EAAAxF,QAAAwF,EAAA,EAAAxF,CAAAe,KAClBA,EAAKiM,aAAejM,EAAKiM,aAAazH,KAAlBvF,OAAAwF,EAAA,EAAAxF,QAAAwF,EAAA,EAAAxF,CAAAe,KACpBA,EAAKkM,qBAAuBlM,EAAKkM,qBAAqB1H,KAA1BvF,OAAAwF,EAAA,EAAAxF,QAAAwF,EAAA,EAAAxF,CAAAe,KAC5BA,EAAKmM,YAAcnM,EAAKmM,YAAY3H,KAAjBvF,OAAAwF,EAAA,EAAAxF,QAAAwF,EAAA,EAAAxF,CAAAe,KA7BFA,6EAiCjB,IAAK,IAAIQ,EAAI,EAAGA,GAAK,EAAGA,IACtBN,KAAK6L,WAAWvL,GAAK,QACrBN,KAAKQ,OAAOF,GAAG4K,QAAQO,SAAS,SAElCzL,KAAK6B,SAAS,CAAE+J,SAAS,2CAKzB,IADA,IAAItL,EAAI,EACDA,GAAK,GACiC,UAAvCN,KAAKQ,OAAOF,GAAG4K,QAAQ3K,MAAMiL,MADpBlL,KAKf,OAAOA,EAAI,uCAKPN,KAAK+L,gBAAkB,GAAK/L,KAAK+L,gBAAkB,IAErD/L,KAAKQ,OAAOR,KAAK+L,gBAAgBb,QAAQO,SAASzL,KAAK4D,MAAM4H,OAG7DxL,KAAK6L,WAAW7L,KAAK+L,gBAAkB/L,KAAK4D,MAAM4H,MAClDxL,KAAK4D,MAAMsI,eAGiB,IAAxBlM,KAAK+L,iBACP/L,KAAK6B,SAAS,CAAE+J,SAAS,IACzB5L,KAAK4D,MAAMuI,cAAcnM,KAAK4D,MAAMnF,KAAM,EAC1CuB,KAAK4D,MAAMwI,aAIHpM,KAAK4D,MAAMyI,SAASrM,KAAK4D,MAAMnF,GAAIuB,KAAK+L,iBAEhD/L,KAAK4D,MAAM0I,UAAUtM,KAAK4D,MAAM4H,OAIlCxL,KAAK4D,MAAM2I,+DASb,OAHyB,IAAvBvM,KAAKO,MAAMqL,QACP5L,KAAK4D,MAAM4I,mBACX,uDAIC,IAAA/L,EAAAT,KACP,OACET,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,UACbrB,EAAAC,EAAAC,cAAA,UACEqB,QAASd,KAAK8L,WACdlL,UAAWZ,KAAKgM,uBAChBvN,GAAIuB,KAAK4D,MAAMnF,KAEhBuB,KAAKO,MAAMC,OAAOhF,IAAI,SAAA2P,GAAK,OAC1B5L,EAAAC,EAAAC,cAACgN,EAAD,CACErG,IAAK3F,EAAKD,OAAO2K,EAAM1M,IACvB8G,IAAK4F,EAAM1M,GACX+M,MAAOL,EAAMK,MACb/M,GAAI0M,EAAM1M,eApGDkB,aC8CN+M,cA9Cb,SAAAA,EAAY9I,GAAO,IAAA9D,EAAA,OAAAf,OAAAgB,EAAA,EAAAhB,CAAAiB,KAAA0M,IACjB5M,EAAAf,OAAAkB,EAAA,EAAAlB,CAAAiB,KAAAjB,OAAAmB,EAAA,EAAAnB,CAAA2N,GAAAvM,KAAAH,QACKO,MAAQ,CAAEqB,OAAO,GACtB9B,EAAK0J,QAAU1J,EAAK0J,QAAQlF,KAAbvF,OAAAwF,EAAA,EAAAxF,QAAAwF,EAAA,EAAAxF,CAAAe,KAHEA,yEAOjB,IAAI0J,EAAgC,UAAtBxJ,KAAK4D,MAAM+I,OAAqB,OAAS,QACvD,OAAOnD,mCAIP,IAAIoD,EAAQ9K,SAASC,eAAe,WAChC8K,EAAM/K,SAASC,eAAe,SAOlC,MAN0B,UAAtB/B,KAAK4D,MAAM+I,SAA0C,IAApB3M,KAAK4D,MAAMkJ,OAC9CF,EAAM5K,MAAMwH,QAAU,QACtBqD,EAAIE,QAAU,WACZH,EAAM5K,MAAMwH,QAAU,UAGF,IAApBxJ,KAAK4D,MAAMkJ,KAEXvN,EAAAC,EAAAC,cAAA,OAAKhB,GAAG,UAAUmC,UAAU,SAC1BrB,EAAAC,EAAAC,cAAA,OAAKmB,UAAWZ,KAAK4D,MAAMoJ,iBACzBzN,EAAAC,EAAAC,cAAA,oBAAYO,KAAK4D,MAAMqJ,gBAAvB,eACA1N,EAAAC,EAAAC,cAAA,UAAQqB,QAASd,KAAK4D,MAAMsJ,SAAUzO,GAAG,SAAzC,QAQJc,EAAAC,EAAAC,cAAA,OAAKhB,GAAG,UAAUmC,UAAU,SAC1BrB,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,QACbrB,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,UAAQqB,QAASd,KAAK4D,MAAMsJ,SAAUzO,GAAG,SAAzC,eArCQkB,aC2PLwN,sBAvPb,SAAAA,IAAc,IAAArN,EAAAf,OAAAgB,EAAA,EAAAhB,CAAAiB,KAAAmN,IACZrN,EAAAf,OAAAkB,EAAA,EAAAlB,CAAAiB,KAAAjB,OAAAmB,EAAA,EAAAnB,CAAAoO,GAAAhN,KAAAH,QACKO,MAAQ,CAEX6M,QAAS,CACP,CAAE3O,GAAI,GACN,CAAEA,GAAI,GACN,CAAEA,GAAI,GACN,CAAEA,GAAI,GACN,CAAEA,GAAI,GACN,CAAEA,GAAI,GACN,CAAEA,GAAI,IAER4O,YAAa,SAEbV,OAAQ,QAERG,MAAM,GAGRhN,EAAKsN,QAAU,GACf,IAAK,IAAI9M,EAAI,EAAGA,GAAK,EAAGA,IACtBR,EAAKsN,QAAQ9M,GAAK+C,IAAM2C,YAtBd,OAwBZlG,EAAK8M,MAAQvJ,IAAM2C,YAEnBlG,EAAKwN,UAAY,GACjBxN,EAAKqM,cAAgB,EAAC,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAC1DrM,EAAKoM,aAAepM,EAAKoM,aAAa5H,KAAlBvF,OAAAwF,EAAA,EAAAxF,QAAAwF,EAAA,EAAAxF,CAAAe,KACpBA,EAAKyM,aAAezM,EAAKyM,aAAajI,KAAlBvF,OAAAwF,EAAA,EAAAxF,QAAAwF,EAAA,EAAAxF,CAAAe,KACpBA,EAAK0M,iBAAmB1M,EAAK0M,iBAAiBlI,KAAtBvF,OAAAwF,EAAA,EAAAxF,QAAAwF,EAAA,EAAAxF,CAAAe,KACxBA,EAAKyN,cAAgBzN,EAAKyN,cAAcjJ,KAAnBvF,OAAAwF,EAAA,EAAAxF,QAAAwF,EAAA,EAAAxF,CAAAe,KACrBA,EAAK0N,gBAAkB1N,EAAK0N,gBAAgBlJ,KAArBvF,OAAAwF,EAAA,EAAAxF,QAAAwF,EAAA,EAAAxF,CAAAe,KACvBA,EAAK2N,cAAgB3N,EAAK2N,cAAcnJ,KAAnBvF,OAAAwF,EAAA,EAAAxF,QAAAwF,EAAA,EAAAxF,CAAAe,KACrBA,EAAKuM,SAAWvM,EAAKuM,SAAS/H,KAAdvF,OAAAwF,EAAA,EAAAxF,QAAAwF,EAAA,EAAAxF,CAAAe,KAChBA,EAAKwM,UAAYxM,EAAKwM,UAAUhI,KAAfvF,OAAAwF,EAAA,EAAAxF,QAAAwF,EAAA,EAAAxF,CAAAe,KACjBA,EAAKkN,cAAgBlN,EAAKkN,cAAc1I,KAAnBvF,OAAAwF,EAAA,EAAAxF,QAAAwF,EAAA,EAAAxF,CAAAe,KACrBA,EAAKmN,cAAgBnN,EAAKmN,cAAc3I,KAAnBvF,OAAAwF,EAAA,EAAAxF,QAAAwF,EAAA,EAAAxF,CAAAe,KACrBA,EAAKoN,SAAWpN,EAAKoN,SAAS5I,KAAdvF,OAAAwF,EAAA,EAAAxF,QAAAwF,EAAA,EAAAxF,CAAAe,KAChBA,EAAKsM,UAAYtM,EAAKsM,UAAU9H,KAAfvF,OAAAwF,EAAA,EAAAxF,QAAAwF,EAAA,EAAAxF,CAAAe,KAvCLA,yEA0CJ0L,GACRxL,KAAK6B,SAAS,CAAE8K,OAAQnB,2CAKxB,IAAK,IAAIlL,EAAI,EAAGA,GAAK,EAAGA,IACtBN,KAAKsN,UAAUhN,GAAKN,KAAKoN,QAAQ9M,GAAG4K,QAAQW,WAE9C6B,QAAQC,IAAI3N,KAAKsN,WACjBI,QAAQC,IAAI3N,KAAKO,MAAMoM,+CAUvB,MAN+B,QAA3B3M,KAAKO,MAAM8M,aACbrN,KAAK6B,SAAS,CAAEwL,YAAa,WAEA,WAA3BrN,KAAKO,MAAM8M,aACbrN,KAAK6B,SAAS,CAAEwL,YAAa,QAExBrN,KAAKO,MAAM8M,uDAIlB,IAAIO,EAAU,kBAEd,OADAA,GAAsC,QAA3B5N,KAAKO,MAAM8M,YAAwB,MAAQ,iDAKtD,IAAIO,EAAU,UAEd,OADAA,GAAW5N,KAAKO,MAAMoM,6CAKVkB,EAAaC,GACzB,IAAItC,EAAQxL,KAAKsN,UAAUO,GAAaC,GACxC,GAAIA,GAAc,EAChB,OAAO,EAEP,IAAK,IAAIxN,EAAI,EAAGA,GAAK,EAAGA,IACtB,GAAIN,KAAKsN,UAAUO,GAAaC,EAAaxN,KAAOkL,EAClD,OAAO,EAMb,OAAO,0CAGOqC,EAAaC,GAK3B,IAJA,IAAItC,EAAQxL,KAAKsN,UAAUO,GAAaC,GACpCC,EAAU,EACVC,EAAO,EACPC,EAAQ,EAEVJ,EAAcG,GAAQ,GACtBhO,KAAKsN,UAAUO,EAAcG,GAAMF,KAAgBtC,GAEnDuC,IACAC,IAEF,KACEH,EAAcI,GAAS,GACvBjO,KAAKsN,UAAUO,EAAcI,GAAOH,KAAgBtC,GAEpDuC,IACAE,IAEF,QAAIF,EAAU,yCAQFF,EAAaC,GAUzB,IATA,IAAItC,EAAQxL,KAAKsN,UAAUO,GAAaC,GACpCI,EAAgB,EAChBC,EAAkB,EAClBH,EAAO,EACPC,EAAQ,EACRG,EAAK,EACLC,EAAO,EAITR,EAAcG,GAAQ,GACtBF,EAAaM,GAAM,GACnBpO,KAAKsN,UAAUO,EAAcG,GAAMF,EAAaM,KAAQ5C,GAExD0C,IACAF,IACAI,IAEF,KACEP,EAAcI,GAAS,GACvBH,EAAaO,GAAQ,GACrBrO,KAAKsN,UAAUO,EAAcI,GAAOH,EAAaO,KAAU7C,GAE3D0C,IACAD,IACAI,IAQF,IAJAL,EAAO,EACPC,EAAQ,EACRG,EAAK,EACLC,EAAO,EAELR,EAAcG,GAAQ,GACtBF,EAAaO,GAAQ,GACrBrO,KAAKsN,UAAUO,EAAcG,GAAMF,EAAaO,KAAU7C,GAE1D2C,IACAH,IACAK,IAEF,KACER,EAAcI,GAAS,GACvBH,EAAaM,GAAM,GACnBpO,KAAKsN,UAAUO,EAAcI,GAAOH,EAAaM,KAAQ5C,GAEzD2C,IACAF,IACAG,IAGF,QAAIF,EAAgB,GAAKC,EAAkB,oCAOpCN,EAAaC,GACpB,IAAIQ,EAAWtO,KAAKuN,cAAcM,EAAaC,GAC3CS,EAAavO,KAAKwN,gBAAgBK,EAAaC,GAC/CU,EAAWxO,KAAKyN,cAAcI,EAAaC,GAC/C,SAAIQ,GAAYC,GAAcC,uCAS9B,IADA,IAAIC,GAAQ,EACHC,EAAI,EAAGA,GAAK,EAAGA,IACtBD,EAAQA,GAASzO,KAAKmM,cAAcuC,IAExB,IAAVD,GACFzO,KAAK6B,SAAS,CAAEiL,MAAM,4CAOxB,MADkC,QAAtB9M,KAAKO,MAAMoM,OAAmB,MAAQ,0CAKlD3M,KAAK6B,SAAS,CAAEwL,YAAa,SAAUV,OAAQ,QAASG,MAAM,IAC9D,IAAK,IAAIxM,EAAI,EAAGA,GAAK,EAAGA,IACtBN,KAAKoN,QAAQ9M,GAAG4K,QAAQe,cACxBjM,KAAKmM,cAAc7L,IAAK,mCAInB,IAAAG,EAAAT,KACP,OACET,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,QACZZ,KAAKO,MAAM6M,QAAQ5R,IAAI,SAAAmT,GAAM,OAC5BpP,EAAAC,EAAAC,cAACmP,EAAD,CACErJ,IAAKoJ,EAAOlQ,GACZA,GAAIkQ,EAAOlQ,GACX2H,IAAK3F,EAAK2M,QAAQuB,EAAOlQ,IACzB+N,iBAAkB/L,EAAK+L,iBACvBD,aAAc9L,EAAK8L,aACnBf,MAAO/K,EAAKF,MAAM8M,YAClBnB,aAAczL,EAAKyL,aACnBG,SAAU5L,EAAK4L,SACfC,UAAW7L,EAAK6L,UAChBF,UAAW3L,EAAK2L,UAChBD,cAAe1L,EAAK0L,kBAGxB5M,EAAAC,EAAAC,cAACoP,EAAD,CACEzI,IAAKpG,KAAK4M,MACVM,SAAUlN,KAAKkN,SACfD,cAAejN,KAAKiN,cACpBD,cAAehN,KAAKgN,cACpBL,OAAQ3M,KAAKO,MAAMoM,OACnBG,KAAM9M,KAAKO,MAAMuM,eAjPRnN,oDCWbiJ,mLAGE,IAAMC,EAAU7I,KAAK4D,MAAMiF,QAAQrN,IAAI,SAACsN,EAAQC,GAAT,OAAiBxJ,EAAAC,EAAAC,cAAA,UAAQwG,KAAK,SAASV,IAAKuD,EAAO,GAAIlI,UAAU,SAASnC,GAAI,gBAAkBsK,EAAOjI,QAASgI,EAAO,GAAI9G,MAAO,CAACgH,OAAQ,SAAUF,EAAO,MAKnM,OADA1B,WAAW,WAAKtF,SAASyG,uBAAuB,SAAS,GAAGH,UAAUO,IAAI,kBAAoB,GAE1FpJ,EAAAC,EAAAC,cAAA,QAAMmB,UAAU,QAAQsI,SAAUlJ,KAAK4D,MAAMiF,QAAQ7I,KAAK4D,MAAMiF,QAAQlE,OAAO,GAAG,IAC9EpF,EAAAC,EAAAC,cAAA,OAAKuC,MAAO,CAACmH,SAAU,SAAUC,WAAY,OAAQC,WAAY,WAAYC,UAAW,WAAYtJ,KAAK4D,MAAM2F,SAC/GhK,EAAAC,EAAAC,cAAA,OAAKuC,MAAO,CAACwH,QAAS,OAAQC,MAAO,SAAUZ,gDAKvD,IAAMI,EAAQnH,SAASC,eAAe,eACzB,OAAVkH,GAAeA,EAAMS,QACxB5H,SAASC,eAAe,QAAQC,MAAM2H,QAAU,MAGhD3J,KAAK4J,sBAAwB9H,SAASC,eAAe,QAAQ8H,iBAAiB,QAAS,WACnF,IAAMC,EAAehI,SAASC,eAAe,kBAC3B,OAAf+H,GAAoBA,EAAaC,yDAIxCjI,SAASC,eAAe,QAAQC,MAAM2H,QAAU,EAChD7H,SAASkI,oBAAoB,QAAQhK,KAAK4J,8BA5B9BjK,aAgCLsK,EApCf,SAAmBV,EAASV,GAAsB,IAAbI,EAAaiB,UAAAvF,OAAA,QAAAhE,IAAAuJ,UAAA,IAAAA,UAAA,GAC9CC,IAASC,OAAO7K,EAAAC,EAAAC,cAACqP,EAAD,CAAOvF,QAASA,EAASV,QAASA,EAASI,MAAOA,IAAUnH,SAASC,eAAe,qBCPlGgN,EAAe,GACfC,EAAc,GACdC,EAAY,CAAEC,MAAS,EAAGC,KAAQ,EAAGC,MAAS,EAAGC,KAAQ,GACzDC,EAAW,CAAEC,KAAQ,EAAGC,KAAQ,EAAGC,MAAS,GAC5CC,EAAe,CAAEC,KAAQ,EAAGC,SAAY,GACxCC,EAAS,CAAEC,EAAK,UAAWC,EAAK,WAAYC,EAAK,UAAWC,EAAK,YAAaC,EAAK,UAAWC,EAAK,SAAUC,EAAK,UAAWC,MAAS,YACtIC,EAAqB,SAC3BvR,OAAOwR,OAAOtB,GACdlQ,OAAOwR,OAAOjB,GACdvQ,OAAOwR,OAAOb,GACd3Q,OAAOwR,OAAOV,OAERW,cACF,SAAAA,IAAc,IAAA1Q,EAAA,OAAAf,OAAAgB,EAAA,EAAAhB,CAAAiB,KAAAwQ,IACV1Q,EAAAf,OAAAkB,EAAA,EAAAlB,CAAAiB,KAAAjB,OAAAmB,EAAA,EAAAnB,CAAAyR,GAAArQ,KAAAH,QACKO,MAAQ,CAAEsF,WAAY,SAC3B/F,EAAK2Q,SAAWpN,IAAM2C,YAHZlG,wEAMV,OAAQP,EAAAC,EAAAC,cAACiR,EAAD,CAAMtK,IAAKpG,KAAKyQ,kBAPD9Q,aAWzBgR,cACF,SAAAA,IAAc,IAAAlQ,EAAA,OAAA1B,OAAAgB,EAAA,EAAAhB,CAAAiB,KAAA2Q,IACVlQ,EAAA1B,OAAAkB,EAAA,EAAAlB,CAAAiB,KAAAjB,OAAAmB,EAAA,EAAAnB,CAAA4R,GAAAxQ,KAAAH,QACKO,MAAQ,CAAEiH,KAAM,EAAGoJ,YAAY,GACpCnQ,EAAKoQ,MAAQpQ,EAAKoQ,MAAMvM,KAAXvF,OAAAwF,EAAA,EAAAxF,QAAAwF,EAAA,EAAAxF,CAAA0B,KACbA,EAAKgH,MAAQhH,EAAKgH,MAAMnD,KAAXvF,OAAAwF,EAAA,EAAAxF,QAAAwF,EAAA,EAAAxF,CAAA0B,KAJHA,wEAOV,OACQlB,EAAAC,EAAAC,cAAA,gBAAQO,KAAKO,MAAMiH,sCAI3B,IAA6B,IAA1BxH,KAAKO,MAAMqQ,WAEV,OADA5Q,KAAK4B,QACE5B,KAAKO,MAAMiH,KAEtBxH,KAAK6B,SAAS,CAAE2F,KAAMxH,KAAKO,MAAMiH,KAAO,IACxCJ,WAAWpH,KAAK6Q,MAAO,qCAIvB7Q,KAAK4B,QACLwF,WAAWpH,KAAK6Q,MAAO,qCAGvB7Q,KAAK6B,SAAS,CAAE2F,KAAM,WA1BX7H,aA8BbmR,aAEF,SAAAA,EAAYC,EAAQC,EAAQC,EAAgBC,EAAeC,GAAapS,OAAAgB,EAAA,EAAAhB,CAAAiB,KAAA8Q,GACpE9Q,KAAKoR,EAAIL,EACT/Q,KAAKqR,EAAIL,EACThR,KAAKsR,IAAML,EACXjR,KAAKuR,SAAWL,EAChBlR,KAAKwR,WAAY,EACjBxR,KAAKyR,IAAM,GACXzR,KAAK0R,SAAWhC,EAAaC,KAC7B3P,KAAKwL,MAAQ2F,mDAGZQ,GACG3R,KAAKwR,YAGLG,IAAYrC,EAASC,KACrBvP,KAAKqR,IACEM,IAAYrC,EAASE,KAC5BxP,KAAKoR,IACEO,IAAYrC,EAASG,OAC5BzP,KAAKoR,sCAKT,GAAsB,IAAlBpR,KAAKuR,WAAkBvR,KAAKwR,UAGhC,OAAQxR,KAAK0R,UACT,KAAKhC,EAAaE,SACd5P,KAAK4R,iBACL,MACJ,QACI5R,KAAK6R,mDAMb,OAAQ7R,KAAKsR,KACT,KAAKrC,EAAUG,MACXpP,KAAKoR,EAAIpR,KAAKoR,EAAIpR,KAAKuR,SACvBvR,KAAKqR,EAAIrR,KAAKqR,EAAIrR,KAAKuR,SACvBvR,KAAKsR,IAAMrC,EAAUE,KACrB,MACJ,KAAKF,EAAUE,KACXnP,KAAKoR,EAAIpR,KAAKoR,EAAIpR,KAAKuR,SACvBvR,KAAKqR,EAAIrR,KAAKqR,EAAIrR,KAAKuR,SACvBvR,KAAKsR,IAAMrC,EAAUC,MACrB,MACJ,KAAKD,EAAUC,MACXlP,KAAKoR,EAAIpR,KAAKoR,EAAIpR,KAAKuR,SACvBvR,KAAKqR,EAAIrR,KAAKqR,EAAIrR,KAAKuR,SACvBvR,KAAKsR,IAAMrC,EAAUI,KACrB,MACJ,QACIrP,KAAKoR,EAAIpR,KAAKoR,EAAIpR,KAAKuR,SACvBvR,KAAKqR,EAAIrR,KAAKqR,EAAIrR,KAAKuR,SACvBvR,KAAKsR,IAAMrC,EAAUG,gDAM7B,OAAQpP,KAAKsR,KACT,KAAKrC,EAAUG,MACXpP,KAAKoR,EAAIpR,KAAKoR,EAAoB,EAAhBpR,KAAKuR,SACvBvR,KAAKsR,IAAMrC,EAAUE,KACrB,MACJ,KAAKF,EAAUE,KACXnP,KAAKqR,EAAIrR,KAAKqR,EAAoB,EAAhBrR,KAAKuR,SACvBvR,KAAKsR,IAAMrC,EAAUC,MACrB,MACJ,KAAKD,EAAUC,MACXlP,KAAKoR,EAAIpR,KAAKoR,EAAoB,EAAhBpR,KAAKuR,SACvBvR,KAAKsR,IAAMrC,EAAUI,KACrB,MACJ,QACIrP,KAAKqR,EAAIrR,KAAKqR,EAAoB,EAAhBrR,KAAKuR,SACvBvR,KAAKsR,IAAMrC,EAAUG,uCAM7B,IAAM0C,EAAS,IAAIhB,EAAQ9Q,KAAKoR,EAAGpR,KAAKqR,EAAGrR,KAAKsR,IAAKtR,KAAKuR,SAAUvR,KAAKwL,OAIzE,OAHAsG,EAAON,UAAYxR,KAAKwR,UACxBM,EAAOL,IAAMzR,KACb8R,EAAOJ,SAAW1R,KAAK0R,SAChBI,WAITC,cACF,SAAAA,EAAYnO,GAAO,IAAA3C,EAAA,OAAAlC,OAAAgB,EAAA,EAAAhB,CAAAiB,KAAA+R,IACf9Q,EAAAlC,OAAAkB,EAAA,EAAAlB,CAAAiB,KAAAjB,OAAAmB,EAAA,EAAAnB,CAAAgT,GAAA5R,KAAAH,KAAM4D,KACDrD,MAAQ,CACT2F,MAAO,KACP8L,QAAQ,EACRC,QAAQ,EACRjQ,MAAOsO,EAAqB,IAAMT,EAAOQ,MACzC6B,YAAajR,EAAK2C,MAAMsO,YACxBC,YAAalR,EAAK2C,MAAMuO,aARblR,wEAYf,OAAQ1B,EAAAC,EAAAC,cAAA,UACJhB,GAAIuB,KAAK4D,MAAMnF,GACfmC,UAAWZ,KAAKO,MAAMyB,OACrBhC,KAAKO,MAAM2F,cAhBHvG,aA6WNyS,cAtVX,SAAAA,IAAc,IAAAhR,EAAArC,OAAAgB,EAAA,EAAAhB,CAAAiB,KAAAoS,IACVhR,EAAArC,OAAAkB,EAAA,EAAAlB,CAAAiB,KAAAjB,OAAAmB,EAAA,EAAAnB,CAAAqT,GAAAjS,KAAAH,QACKoS,iBAAmB,GACxBhR,EAAKiR,qBAAuBhP,IAAM2C,YAClC5E,EAAKb,MAAQ,CAAE+R,MAAO,GAAIC,OAAQ,EAAG5B,KAAM,EAAG6B,YAAa,kBAC3DC,IAAeC,OAAO,CAClB1E,KAAM,WACF5M,EAAKuR,kBAET1E,MAAO,WACH7M,EAAKwR,mBAETxE,GAAI,WACAhN,EAAKyR,gBAETxE,KAAM,WACFjN,EAAK0R,oBAGb,IAAK,IAAI1B,EAAI,EAAGA,EAAIpC,EAAaoC,IAAK,CAElC,IADA,IAAI2B,EAAU,GACL1B,EAAI,EAAGA,EAAItC,EAAcsC,IAC9B0B,EAAQtQ,KAAKY,IAAM2C,aAEvB5E,EAAKgR,iBAAiB3P,KAAKsQ,GAxBrB,OAAA3R,wEA6BV,IAFK,IAAAG,EAAAvB,KACDoS,EAAmB,GACdf,EAAI,EAAGA,EAAItC,EAAcsC,IAAK,CAEnC,IADA,IAAI2B,EAAM,GACD5B,EAAI,EAAGA,EAAIpC,EAAaoC,IAC7B4B,EAAIvQ,KAAKlD,EAAAC,EAAAC,cAACwT,EAAD,CAAQ7M,IAAKpG,KAAKoS,iBAAiBhB,GAAGC,GAAI5S,GAAI2S,EAAI,IAAMC,EAAGa,YAAad,EAAGe,YAAad,KAErGe,EAAiB3P,KAAKlD,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,aAAaoS,IAEtD,OACIzT,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,aACXrB,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,UACXrB,EAAAC,EAAAC,cAAA,QAAAV,OAAAmU,OAAA,GAAWT,IAAeU,OAA1B,CAAkCC,SAAS,IAAInN,KAAK,SAASC,MAAM,QAAQpF,QAAS,WAChFS,EAAK8R,eAAe9R,EAAK+R,qBACzB/R,EAAK8Q,qBAAqBnH,QAAQuF,SAASvF,QAAQzD,YAEvDlI,EAAAC,EAAAC,cAAA,SAAOwG,KAAK,SAASC,MAAM,WAAWpF,QAAS,WAC3CS,EAAK8Q,qBAAqBnH,QAAQuF,SAASvF,QAAQrJ,SAAS,CAAC+O,YAAa,IAC1ErP,EAAKiF,cAGbjH,EAAAC,EAAAC,cAAC8T,EAAD,CAAkBnN,IAAKpG,KAAKqS,uBAC5B9S,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,gBACXrB,EAAAC,EAAAC,cAAA,UAAQmB,UAAU,cACbwR,8CAUjB,IADA,IAAIoB,EAAW,GACNlT,EAAI,EAAGA,EAAI0O,EAAa1O,IAC7BkT,EAASlT,GAAK,GACdkT,EAASlT,GAAGyO,GAAgB,KAC5ByE,EAASlT,GAAGmT,MAEhB,OAAOD,0CAGKE,EAAOpB,GACnB,IAAK,IAAIhS,EAAI,EAAGA,EAAIgS,EAAM3N,OAAQrE,IAAK,CACnC,IAAMqT,EAAMrB,EAAMhS,GAClBoT,EAAMC,EAAIvC,GAAGuC,EAAItC,GAAKsC,wCAIjBC,EAAKC,GAGd,OAFAD,EAAM1O,KAAK4O,KAAKF,GAChBC,EAAM3O,KAAKC,MAAM0O,GACV3O,KAAKC,MAAMD,KAAKD,UAAY4O,EAAMD,EAAM,IAAMA,8CAKrD,OADa5T,KAAK+T,aAAa,EAAG,IAE9B,KAAK,EACD,OAAO/T,KAAKgU,eAChB,KAAK,EACD,OAAOhU,KAAKiU,eAChB,KAAK,EACD,OAAOjU,KAAKkU,eAChB,KAAK,EACD,OAAOlU,KAAKmU,eAChB,KAAK,EACD,OAAOnU,KAAKoU,eAChB,KAAK,EACD,OAAOpU,KAAKqU,eAChB,QACI,OAAOrU,KAAKmU,uDAMpB,IAAIG,EAAW,GAKf,OAJAA,EAAS7R,KAAK,IAAIqO,EAAQ,EAAG,EAAG7B,EAAUC,MAAO,EAAGW,EAAOC,IAC3DwE,EAAS7R,KAAK,IAAIqO,EAAQ,EAAG,EAAG7B,EAAUC,MAAO,EAAGW,EAAOC,IAC3DwE,EAAS7R,KAAK,IAAIqO,EAAQ,EAAG,EAAG7B,EAAUG,MAAO,EAAGS,EAAOC,IAC3DwE,EAAS7R,KAAK,IAAIqO,EAAQ,EAAG,EAAG7B,EAAUG,MAAO,EAAGS,EAAOC,IACpDwE,yCAIP,IAAIA,EAAW,GAKf,OAJAA,EAAS7R,KAAK,IAAIqO,EAAQ,EAAG,EAAG7B,EAAUE,KAAM,EAAGU,EAAOE,IAC1DuE,EAAS7R,KAAK,IAAIqO,EAAQ,EAAG,EAAG7B,EAAUC,MAAO,EAAGW,EAAOE,IAC3DuE,EAAS7R,KAAK,IAAIqO,EAAQ,EAAG,EAAG7B,EAAUG,MAAO,EAAGS,EAAOE,IAC3DuE,EAAS7R,KAAK,IAAIqO,EAAQ,EAAG,EAAG7B,EAAUG,MAAO,EAAGS,EAAOE,IACpDuE,yCAIP,IAAIA,EAAW,GAKf,OAJAA,EAAS7R,KAAK,IAAIqO,EAAQ,EAAG,EAAG7B,EAAUC,MAAO,EAAGW,EAAOM,IAC3DmE,EAAS7R,KAAK,IAAIqO,EAAQ,EAAG,EAAG7B,EAAUC,MAAO,EAAGW,EAAOM,IAC3DmE,EAAS7R,KAAK,IAAIqO,EAAQ,EAAG,EAAG7B,EAAUG,MAAO,EAAGS,EAAOM,IAC3DmE,EAAS7R,KAAK,IAAIqO,EAAQ,EAAG,EAAG7B,EAAUE,KAAM,EAAGU,EAAOM,IACnDmE,yCAIP,IAAIA,EAAW,GAKf,OAJAA,EAAS7R,KAAK,IAAIqO,EAAQ,EAAG,EAAG7B,EAAUI,KAAM,EAAGQ,EAAOG,IAC1DsE,EAAS7R,KAAK,IAAIqO,EAAQ,EAAG,EAAG7B,EAAUC,MAAO,EAAGW,EAAOG,IAC3DsE,EAAS7R,KAAK,IAAIqO,EAAQ,EAAG,EAAG7B,EAAUG,MAAO,EAAGS,EAAOG,IAC3DsE,EAAS7R,KAAK,IAAIqO,EAAQ,EAAG,EAAG7B,EAAUG,MAAO,EAAGS,EAAOG,IACpDsE,yCAIP,IAAIA,EAAW,GACfA,EAAS7R,KAAK,IAAIqO,EAAQ,EAAG,EAAG7B,EAAUE,KAAM,EAAGU,EAAOO,IAC1DkE,EAAS7R,KAAK,IAAIqO,EAAQ,EAAG,EAAG7B,EAAUC,MAAO,EAAGW,EAAOO,IAC3DkE,EAAS7R,KAAK,IAAIqO,EAAQ,EAAG,EAAG7B,EAAUG,MAAO,EAAGS,EAAOO,IAC3D,IAAMuD,EAAM,IAAI7C,EAAQ,EAAG,EAAG7B,EAAUG,MAAO,EAAGS,EAAOO,GAGzD,OAFAuD,EAAIjC,SAAWhC,EAAaE,SAC5B0E,EAAS7R,KAAKkR,GACPW,yCAIP,IAAIA,EAAW,GAKf,OAJAA,EAAS7R,KAAK,IAAIqO,EAAQ,EAAG,EAAG7B,EAAUG,MAAO,EAAGS,EAAOI,IAC3DqE,EAAS7R,KAAK,IAAIqO,EAAQ,EAAG,EAAG7B,EAAUG,MAAO,EAAGS,EAAOI,IAC3DqE,EAAS7R,KAAK,IAAIqO,EAAQ,EAAG,EAAG7B,EAAUG,MAAO,EAAGS,EAAOI,IAC3DqE,EAAS7R,KAAK,IAAIqO,EAAQ,EAAG,EAAG7B,EAAUG,MAAO,EAAGS,EAAOI,IACpDqE,mDAGcC,EAAWjC,GAChC,IAAK,IAAIhS,EAAI,EAAGA,EAAIgS,EAAM3N,OAAQrE,IAAK,CACnC,IAAMqT,EAAMrB,EAAMhS,GACdqT,EAAInC,YACJ+C,EAAUZ,EAAIvC,GAAGuC,EAAItC,GAAKsC,qCAK7Ba,EAAO7C,GACI,OAAZA,EACA6C,EAAMC,SAEND,EAAME,KAAK/C,8CAIA4C,EAAWI,EAAarC,GAEvC,GADgBtS,KAAK4U,eAAeL,EAAWI,GAChC,CACX3U,KAAK6U,mBAAmBF,GAExB,IAAMG,EAAW9U,KAAKsT,oBACtBtT,KAAK+U,mBAAmBzC,EAAOwC,GAC/B9U,KAAKgV,gBAAgBT,EAAWO,2CAIzBP,EAAWjC,GACtB,IAAK,IAAIhS,EAAI,EAAGA,EAAIgS,EAAM3N,OAAQrE,IAAK,CACnC,IAAMqT,EAAMrB,EAAMhS,GAElB,GAAIqT,EAAItC,IAAMtC,EAAe,GAAqC,MAA/BwF,EAAUZ,EAAIvC,GAAGuC,EAAItC,EAAI,IAAckD,EAAUZ,EAAIvC,GAAGuC,EAAItC,EAAI,GAAGG,UAClG,OAAO,EAGf,OAAO,mCAGFG,EAASW,GACd,IAAI2C,GAAgB,EAChBN,EAAc,GACdJ,EAAYvU,KAAKkV,iBACrBlV,KAAKmV,yBAAyBZ,EAAWjC,GACzC,IAAK,IAAIhS,EAAI,EAAGA,EAAIgS,EAAM3N,OAAQrE,IAAK,CACnC,IAAMqT,EAAMrB,EAAMhS,GAElB,IAAIqT,EAAInC,UAAR,CAGA,IAAM4D,EAAazB,EAAI0B,QAIvB,GAHArV,KAAKsV,SAASF,EAAYzD,GAGtByD,EAAWhE,EAAI,GAAKgE,EAAW/D,EAAI,GAAK+D,EAAWhE,IAAMpC,GAAwD,MAAzCuF,EAAUa,EAAWhE,GAAGgE,EAAW/D,GAAY,CACvH4D,GAAgB,EAChB,MAIJN,EAAYlS,KAAK2S,GACjBb,EAAUa,EAAWhE,GAAGgE,EAAW/D,GAAK+D,GAI5C,OAAsB,IAAlBH,GACAV,EAAYvU,KAAKkV,iBACjBlV,KAAKgV,gBAAgBT,EAAWjC,GACzBiC,IAEXvU,KAAKuV,mBAAmBhB,EAAWI,EAAarC,GAChDtS,KAAKwV,4BAA4Bb,GAC1BJ,8CAGQI,GACf,IAAK,IAAIlR,EAAI,EAAGA,EAAIkR,EAAYhQ,OAAQlB,IACpCkR,EAAYlR,GAAG+N,WAAY,sDAIPmD,GAExB,IAAK,IAAIlR,EAAI,EAAGA,EAAIkR,EAAYhQ,OAAQlB,IAAK,CACzC,IAAMgS,EAAWd,EAAYlR,GACvBiS,EAAWD,EAAShE,IAC1BiE,EAAStE,EAAIqE,EAASrE,EACtBsE,EAASrE,EAAIoE,EAASpE,EACtBqE,EAASlE,UAAYiE,EAASjE,UAC9BkE,EAASpE,IAAMmE,EAASnE,4CAIjBgB,GACXtS,KAAK2V,OAAO,KAAMrD,6CAIlBtS,KAAK2V,OAAOrG,EAASG,MAAO,+CAI5BzP,KAAK2V,OAAOrG,EAASE,KAAM,6CAI3BxP,KAAK2V,OAAO,KAAM,+CAIlB3V,KAAK2V,OAAOrG,EAASC,KAAM,qCAGxBoC,EAASmD,GAEZ,IACItB,EADAlB,EAAQtS,KAAKO,MAAM+R,MAEP,MAAZwC,GACA9U,KAAK+U,mBAAmBzC,EAAOwC,GAC/BtB,EAAWxT,KAAKkV,iBAChBlV,KAAKgV,gBAAgBxB,EAAUlB,IAE/BkB,EAAWxT,KAAK4V,SAASjE,EAASW,GAEtC,IAAK,IAAIlB,EAAI,EAAGA,EAAIoC,EAAS7O,OAAQyM,IAEjC,IADA,IAAMzC,EAAS6E,EAASpC,GACfC,EAAI,EAAGA,EAAI1C,EAAOhK,OAAQ0M,IAAK,CACpC,IAAMwE,EAAOlH,EAAO0C,GACR,MAARwE,EACA7V,KAAK8V,eAAe1E,EAAGC,EAAGwE,EAAKrK,OAE/BxL,KAAK+V,gBAAgB3E,EAAGC,GAIpCrR,KAAK6B,SAAS,CAAEyQ,MAAOA,+CAGRA,EAAOwC,GACtB,IAAK,IAAIxU,EAAI,EAAGA,EAAIwU,EAASnQ,OAAQrE,IAAK,CACtC,IAAM0V,EAAUlB,EAASxU,GACzBgS,EAAM7P,KAAKuT,2CAIJ5E,EAAGC,EAAGrP,GACjBhC,KAAKoS,iBAAiBhB,GAAGC,GAAGnG,QAAQrJ,SAAS,CAAEG,MAAOsO,EAAqB,IAAMtO,4CAGrEoP,EAAGC,GACfrR,KAAKoS,iBAAiBhB,GAAGC,GAAGnG,QAAQrJ,SAAS,CAAEG,MAAOsO,EAAqB,IAAMT,EAAOQ,4CAGhF,IAAA3O,EAAA1B,KAERiK,EAAUjK,KAAKO,MAAMiS,YAAc,gBAAkBxS,KAAKO,MAAMgS,OAAS,cAAgBvS,KAAKqS,qBAAqBnH,QAAQuF,SAASvF,QAAQ3K,MAAMiH,KAAO,YACrJ,CAAC,CAAC,8BAA+B,WAE7B,IAAK,IAAI4J,EAAI,EAAGA,EAAIpC,EAAaoC,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAItC,EAAcsC,IAC9B3P,EAAKqU,gBAAgB3E,EAAGC,GAIhC3P,EAAKG,SAAS,CAAE8O,KAAM,EAAG4B,OAAQ,EAAGC,YAAa,IAAM,kBAAMrI,IAASkB,uBAAuBvJ,SAASC,eAAe,0BACpH,qCAEH,IAAA4B,EAAA3D,KACmB,GAArBA,KAAKO,MAAMgS,OACXvS,KAAK6B,SAAS,CAAE2Q,YAAa,4CAA8C,kBAAM7O,EAAKsG,cAEjFjK,KAAKO,MAAMgS,QAAU,GAC1BvS,KAAK6B,SAAS,CAAE2Q,YAAa,QAAU,kBAAM7O,EAAKsG,cAE7CjK,KAAKO,MAAMgS,OAAS,IAAMvS,KAAKO,MAAMgS,OAAS,GACnDvS,KAAK6B,SAAS,CAAE2Q,YAAa,iCAAmC,kBAAM7O,EAAKsG,cAG3EjK,KAAK6B,SAAS,CAAE2Q,YAAa,+CAAiD,kBAAM7O,EAAKsG,qBAlVtEtK,aC7IhBsW,eAvBX,SAAAA,IAAa,IAAAnW,EAAA,OAAAf,OAAAgB,EAAA,EAAAhB,CAAAiB,KAAAiW,IACTnW,EAAAf,OAAAkB,EAAA,EAAAlB,CAAAiB,KAAAjB,OAAAmB,EAAA,EAAAnB,CAAAkX,GAAA9V,KAAAH,QACK+K,MAAQ,CAACC,KAAM,CAACC,mBAAoB,OAFhCnL,wEAKT,OACIP,EAAAC,EAAAC,cAACmF,EAAA,KAAD,CAAMnG,GAAG,SAASoG,YAAY,GAC1BtF,EAAAC,EAAAC,cAACmF,EAAA,IAAD,CAAKsR,MAAM,QACP3W,EAAAC,EAAAC,cAAC0W,EAAD,CAAerL,OAAQ9K,QAE3BT,EAAAC,EAAAC,cAACmF,EAAA,IAAD,CAAKsR,MAAM,UACP3W,EAAAC,EAAAC,cAAC2W,EAAD,OAEJ7W,EAAAC,EAAAC,cAACmF,EAAA,IAAD,CAAKsR,MAAM,WACP3W,EAAAC,EAAAC,cAAC4W,EAAD,OAEJ9W,EAAAC,EAAAC,cAACmF,EAAA,IAAD,CAAKsR,MAAM,QACP3W,EAAAC,EAAAC,cAACH,EAAD,eAlBFK,aCDE2W,QACW,cAA7BpX,OAAOqX,SAASC,UAEe,UAA7BtX,OAAOqX,SAASC,UAEhBtX,OAAOqX,SAASC,SAASC,MACvB,2DCTNtM,IAASC,OAAO7K,EAAAC,EAAAC,cAACiX,GAAD,MAAS5U,SAASC,eAAe,SDkH3C,kBAAmB4U,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d05d3e0d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/funny_bot.49631b63.gif\";","var map = {\n\t\"./en\": 116,\n\t\"./en-US\": 62,\n\t\"./en-US.js\": 62,\n\t\"./en.js\": 116,\n\t\"./fr\": 117,\n\t\"./fr-FR\": 63,\n\t\"./fr-FR.js\": 63,\n\t\"./fr.js\": 117,\n\t\"./he\": 118,\n\t\"./he.js\": 118,\n\t\"./icons/en\": 119,\n\t\"./icons/en-US\": 23,\n\t\"./icons/en-US.js\": 23,\n\t\"./icons/en.js\": 119,\n\t\"./icons/fr\": 120,\n\t\"./icons/fr-FR\": 44,\n\t\"./icons/fr-FR.js\": 44,\n\t\"./icons/fr.js\": 120,\n\t\"./icons/ja\": 121,\n\t\"./icons/ja-JP\": 64,\n\t\"./icons/ja-JP.js\": 64,\n\t\"./icons/ja.js\": 121,\n\t\"./icons/nl\": 65,\n\t\"./icons/nl.js\": 65,\n\t\"./icons/zh\": 122,\n\t\"./icons/zh-CN\": 66,\n\t\"./icons/zh-CN.js\": 66,\n\t\"./icons/zh.js\": 122,\n\t\"./ja\": 123,\n\t\"./ja-JP\": 67,\n\t\"./ja-JP.js\": 67,\n\t\"./ja.js\": 123,\n\t\"./nl\": 124,\n\t\"./nl.js\": 124,\n\t\"./pt\": 125,\n\t\"./pt-BR\": 68,\n\t\"./pt-BR.js\": 68,\n\t\"./pt.js\": 125,\n\t\"./ru\": 126,\n\t\"./ru-RU\": 69,\n\t\"./ru-RU.js\": 69,\n\t\"./ru.js\": 126,\n\t\"./zh\": 127,\n\t\"./zh-CN\": 70,\n\t\"./zh-CN.js\": 70,\n\t\"./zh.js\": 127\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 229;","import React, {Component} from 'react';\r\nimport './PaulsMiniGame.css';\r\nimport rr from './funny_bot.gif';\r\n\r\n\r\nconst FIELDS = 9; // Definiert Anzahl der Spielfelder\r\n\r\n/* Es gibt 3 Spielmodi:\r\nWenn window.scenarioFlag = 0 ist, dann ist es der Modus 2-Player\r\nWenn window.scenarioFlag = 1 ist, dann ist es normal der Modus 1-Player(You start). Nur wenn man Button 1-Player(crazy Robot starts) clickt, befindet man sich stattdessen in diesem Modus*/\r\nwindow.scenarioFlag = 1;\r\n\r\n//Für Button um Spiel zu reseten(ist für Fallunterscheidung vonnötten, damit man danach nicht auf ein falschen Spielmodus zurücksetzt)\r\nwindow.scenarioFlagPlayAgain = 1;\r\n\r\n// Definiert wer am Zug ist. Nur relevant bei 2\r\nwindow.playerOnTurn = 1; // Definiert wer am Zug ist. Nur relevant im Modus 2-Player. Bei den anderen beiden Modi ist man immer O\r\n\r\n\r\n//Enthält Hauptkomponente, die exportiert wird und somit am Bildschirm ausgegeben wird\r\nclass PaulsMiniGame extends Component {\r\n    render() {\r\n        return (\r\n            <Container/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PaulsMiniGame;\r\n\r\n\r\n// Klasse, die das gesamte Spiel enthält\r\nclass Container extends React.Component {\r\n    constructor(attributes) {\r\n        super(attributes);\r\n        //Die 3 weiteren Felder werden für die 3-Spielmodibuttons verwendet\r\n        let tempFields = new Array(FIELDS + 3);\r\n        //initialisierung des arrays, damit es als state \"übertragen\" werden kann. Initialisierung mit -1, da dies bedeutetm dass das Feld frei ist\r\n        for (let i = 0; i < 13; i++) {\r\n            tempFields[i] = -1;\r\n        }\r\n        //macht die 13 Felder zu states, mit denen dauerhaft gearbeitet, sozusagen, das Herzstück des Codes darstellen\r\n        this.state = {\r\n            fields: tempFields,\r\n        };\r\n\r\n    }\r\n\r\n    //sorgt für die Darstellung des Felds und dafür, dass es befüllt werden kann. Sorgt auch dafür, dass es nicht befüllt werden kann, wenn jemand gewonnen hat\r\n    //Der Parameter i bestimmt, welches Feld angeklickt wurde.\r\n    // Unterscheidet ob, man im Modus 2-Player ist oder gegen den Computer spielt\r\n    // Das eigentliche Beschreiben des Felds über den State wird auf die Funktion action() ausgelagert im 2-Player Modus oder auf actionKI(), falls man gegen den Computer spielt\r\n    inputFields(i) {\r\n\r\n        //lokale Kopie von den States erstellen, da dies best practice ist\r\n        let fieldValue = this.state.fields[i];\r\n        //damit in den leeren Feldern nicht -1 steht, erhalten diese für die Darstellung den Wert \"undefined\"\r\n        if (fieldValue === -1)\r\n            fieldValue = undefined;\r\n\r\n        //verhindert das Beschreiben von Feldern, wo bereits X oder O gesetzt wurde\r\n        let tempFields = new Array(FIELDS + 3);\r\n        for (let i = 0; i < 13; i++) {\r\n            tempFields[i] = this.state.fields[i];\r\n        }\r\n        if (!(tempFields[i] === -1)) {\r\n            return (\r\n                <button className=\"button2\"\r\n                >{fieldValue}\r\n                </button>\r\n            );\r\n        }\r\n\r\n        //sorgt dafür, dass wenn jemand gewonnen hat,  man keine weiteren Felder beschreiben kann\r\n        if (this.result(tempFields) === \"X wins\" || this.result(tempFields) === \"O wins\"\r\n            || this.result(tempFields) === \"You lose xD\" || this.result(tempFields) === \"You win QQ\") {\r\n            return (\r\n                <button className=\"button2\"\r\n                >{fieldValue}\r\n                </button>\r\n            );\r\n        }\r\n\r\n        //Wird aufgerufen im Modus 2-PLayer\r\n        if (window.scenarioFlag === 0) {\r\n            return (\r\n                <button className=\"button2\"\r\n                        onClick={() => this.action(i)}\r\n                >{fieldValue}\r\n                </button>\r\n            );\r\n        }\r\n\r\n        //Wird aufgerufen wenn man gegen Bot spielt\r\n        if (window.scenarioFlag === 1) {\r\n            return (\r\n                <button className=\"button2\"\r\n                        onClick={() => this.actionKI(i)}\r\n                >{fieldValue}\r\n                </button>\r\n            );\r\n        }\r\n    }\r\n\r\n    //sorgt für die Darstellung des Buttons 2-Player und ruft die Funktion this.reset() bei klick auf, die diesen Modus einleitet\r\n    inputModeField1() {\r\n        return (\r\n            <Mode1\r\n                id=\"mode1\"\r\n                onClick={() => this.mode1()}\r\n            >2-Player\r\n            </Mode1>\r\n        );\r\n    }\r\n\r\n    //sorgt für die Darstellung des Buttons 1-Player (Crazy Robot starts) und ruft die Funktion this.Mode2() bei klick auf, die diesen Modus einleutet\r\n    inputModeField2() {\r\n        return (\r\n            <Mode2\r\n                onClick={() => this.mode2()}\r\n            >\r\n            </Mode2>\r\n        );\r\n    }\r\n\r\n    //sorgt für die Darstellung des Buttons 1-Player (You start) und ruft die Funktion this.Mode3() bei klick auf, die diesen Modus einleutet\r\n    inputModeField3() {\r\n        return (\r\n            <Mode3\r\n                onClick={() => this.mode3()}\r\n            >\r\n            </Mode3>\r\n        );\r\n    }\r\n\r\n    //wird genutzt um das Spiel zurückzusetzen\r\n    inputModeField4() {\r\n        return (\r\n            <Reset\r\n                id=\"reset\"\r\n                onClick={() => this.reset()}\r\n            >play again\r\n            </Reset>\r\n        );\r\n    }\r\n\r\n    //wird durch klicken des Button eingeleitet  und leitet neues Spiel im Modus 2-Player ein\r\n    mode1() {\r\n        //alle Felder auf -1 setzen\r\n        let tempFields = new Array(FIELDS + 3);\r\n        for (let i = 0; i < 13; i++) {\r\n            tempFields[i] = this.state.fields[i];\r\n        }\r\n        for (let i = 0; i < 10; i++) {\r\n            tempFields[i] = -1\r\n        }\r\n        this.setState({\r\n            fields: tempFields,\r\n        });\r\n        //flags entsprechend anpassen\r\n        window.playerOnTurn = 0;\r\n        window.scenarioFlag = 0;\r\n        // Button des aktiven Spielmodus highlighten\r\n        document.getElementById(\"mode1\").style.backgroundColor = \"khaki\";\r\n        document.getElementById(\"mode2\").style.backgroundColor = \"buttonface\";\r\n        document.getElementById(\"mode3\").style.backgroundColor = \"buttonface\";\r\n    }\r\n\r\n\r\n    //wird durch klick des  Button eingeleitet  und leitet  neues Spiel im Modus 1-Player (Crazy Robot starts) ein\r\n    mode2() {\r\n        //alle Felder auf -1 setzen\r\n        let tempFields = new Array(FIELDS + 3);\r\n        for (let i = 0; i < 13; i++) {\r\n            tempFields[i] = this.state.fields[i];\r\n        }\r\n        for (let i = 0; i < 10; i++) {\r\n            tempFields[i] = -1\r\n        }\r\n        this.setState({\r\n            fields: tempFields,\r\n        });\r\n        //flags entsprechend anpassen\r\n        window.playerOnTurn = 1;\r\n        //durch dieses setzen im \"Voraus\" wird dafür gesorgt, dass der Computer anfängt\r\n        tempFields[4] = 'X';\r\n        window.scenarioFlag = 1;\r\n        window.scenarioFlagPlayAgain=0;\r\n        // Button des aktiven Spielmodus highlighten\r\n        document.getElementById(\"mode1\").style.backgroundColor = \"buttonface\";\r\n        document.getElementById(\"mode2\").style.backgroundColor = \"khaki\";\r\n        document.getElementById(\"mode3\").style.backgroundColor = \"buttonface\";\r\n    }\r\n\r\n    //wird durch klick des  Button eingeleitet  und leitet  neues  Spiel im Modus 1-Player  (You start) ein\r\n    mode3() {\r\n        //alle Felder auf -1 setzen\r\n        let tempFields = new Array(FIELDS + 3);\r\n        for (let i = 0; i < 13; i++) {\r\n            tempFields[i] = this.state.fields[i];\r\n        }\r\n        for (let i = 0; i < 10; i++) {\r\n            tempFields[i] = -1\r\n        }\r\n        this.setState({\r\n            fields: tempFields,\r\n        });\r\n        //flags entsprechend anpassen\r\n        window.playerOnTurn = 1;\r\n        window.scenarioFlag = 1;\r\n        window.scenarioFlagPlayAgain=1;\r\n        // Button des aktiven Spielmodus highlighten\r\n        document.getElementById(\"mode1\").style.backgroundColor = \"buttonface\";\r\n        document.getElementById(\"mode2\").style.backgroundColor = \"buttonface\";\r\n        document.getElementById(\"mode3\").style.backgroundColor = \"khaki\";\r\n    }\r\n\r\n    //wird durch klick des  reset-Buttons eingeleitet  und setzt Spiel zurück(dafür wird einfach die passende Funktion des Spielmodi aufgerufen)\r\n    reset() {\r\n        if(window.scenarioFlag === 0)\r\n        {\r\n            this.mode1();\r\n            return;\r\n        }\r\n        if(window.scenarioFlag === 1 && window.scenarioFlagPlayAgain===0)\r\n        {\r\n            this.mode2();\r\n            return;\r\n        }\r\n        if(window.scenarioFlag === 1 && window.scenarioFlagPlayAgain===1)\r\n        {\r\n            this.mode3();\r\n        }\r\n    }\r\n\r\n\r\n    //befüllt das Spielfeld im Modus 2-PLayer. Je nachdem welcher Spieler am Zug ist, wird X oder O gesetzt. Danach wird window.playerOnTurn umgeändert, dass im nächsten Zug der andere sein Zeichen machen kann\r\n    action(i) {\r\n        let tempFields = new Array(FIELDS + 3);\r\n        for (let i = 0; i < 13; i++) {\r\n            tempFields[i] = this.state.fields[i];\r\n        }\r\n        if (window.playerOnTurn === 0) {\r\n            tempFields[i] = 'X';\r\n            window.playerOnTurn = 1;\r\n        }\r\n        else {\r\n            tempFields[i] = 'O';\r\n            window.playerOnTurn = 0;\r\n        }\r\n        //übertragen der Eingabe in den state\r\n        this.setState({\r\n            fields: tempFields,\r\n        });\r\n    }\r\n\r\n    //befüllt das Spielfeld im Modus 1-Player(You start) und 1-Player(crazy computer starts). Selber setzt man immer O. Der Computer immer X\r\n    actionKI(i) {\r\n        let tempFields = new Array(FIELDS + 3);\r\n        for (let i = 0; i < 13; i++) {\r\n            tempFields[i] = this.state.fields[i];\r\n        }\r\n        //setzen der eigenen Eingabe\r\n        tempFields[i] = 'O';\r\n        this.setState({\r\n            fields: tempFields,\r\n        });\r\n\r\n        if (this.result(tempFields) === \"X wins\" || this.result(tempFields) === \"O wins\"\r\n            || this.result(tempFields) === \"You lose xD\" || this.result(tempFields) === \"You win QQ\") {\r\n            return;\r\n        }\r\n\r\n        //ab hier wird ein passendes Feld für den Computer gesucht und dann gesetzt\r\n        // aufrufen der Funktion estimateBestField. mit diesen Parametern ermittelt sie, ob es ein Feld gibt, mit dem der Computer direkt gewinnen kann\r\n        let a = estimateBestField(tempFields, 'X', 'X', -1);\r\n        //wurde ein Feld gefunden, wird es nun gesetzt und die funktion beendet\r\n        if (a > 0) {\r\n            tempFields[a] = 'X';\r\n            this.setState({\r\n                fields: tempFields,\r\n            });\r\n            return;\r\n        }\r\n\r\n        // wurde oben kein passendes feld gefunden, wird die Funktion estimateBestField erneut aufgerufen. mit diesen Parametern ermittelt sie, ob es ein Feld gibt, mit dem der Spieler direkt gewinnen kann und setzt dort einen eigens Zeichen, damit der Spieler nicht gewinnt\r\n        let b = estimateBestField(tempFields, 'O', 'O', -1);\r\n        if (b > 0) {\r\n            tempFields[b] = 'X';\r\n            this.setState({\r\n                fields: tempFields,\r\n            });\r\n            return;\r\n        }\r\n\r\n        //konnte beim Aufruf der Funktion über die beiden oben genannten Fälle, kein Feld gefunden werden. Wird nun erneut die Funktion aufgerufen. Nun wird überprüft, ob man eine zweier Kette aufzubauen kann, die für einen späteren Gewinn genutzt werden kann\r\n        let c = estimateBestField(tempFields, 'X', -1, -1);\r\n        if (c > 0) {\r\n            tempFields[c] = 'X';\r\n            this.setState({\r\n                fields: tempFields,\r\n            });\r\n            return;\r\n        }\r\n\r\n        //Wenn in den obigen Fällen kein Feld gefunden wird, wird einfach das nächste freie Feld befüllt\r\n        let p = 0;\r\n        while (!(tempFields[p] === -1)) {\r\n            p++;\r\n            if (p > 8) break;\r\n        }\r\n        tempFields[p] = 'X';\r\n\r\n        this.setState({\r\n            fields: tempFields,\r\n        });\r\n    }\r\n\r\n    //Findet über window.playerOnTurn heraus wer am Zug ist und gibt einen Text dazu aus, der später gerendert wird\r\n    nextPlayer() {\r\n        let tempFields = new Array(FIELDS + 3);\r\n        for (let i = 0; i < 13; i++) {\r\n            tempFields[i] = this.state.fields[i];\r\n        }\r\n        if (this.result(tempFields))\r\n            return;\r\n        if (window.playerOnTurn === 1 && window.scenarioFlag === 1) {\r\n            return \"You are O. It is your turn\";\r\n        }\r\n        if (window.playerOnTurn === 0) {\r\n            return \"It is X his turn\";\r\n        }\r\n        if (window.playerOnTurn === 1) {\r\n            return \"It is O his turn\";\r\n        }\r\n\r\n    }\r\n\r\n\r\n    //Alle Gewinnmöglichkeiten sind in dieser Funktion eingespeichert. Sobald eine erreicht ist, ist das Spiel beendet und es wird über einen Text der Gewinner zurückgegeben\r\n    // Ermittelt auch, ob keine Züge mehr möglich sind und somit ein Patt vorliegt\r\n    // Wenn man gegen den Computer spielt wird ein anderer Text zurückgegeben\r\n    result(tempFields2) {\r\n        let tempFields = tempFields2;\r\n        if ((tempFields[0] === 'X' && tempFields[1] === 'X' && tempFields[2] === 'X')\r\n            || (tempFields[6] === 'X' && tempFields[7] === 'X' && tempFields[8] === 'X')\r\n            || (tempFields[0] === 'X' && tempFields[3] === 'X' && tempFields[6] === 'X')\r\n            || (tempFields[1] === 'X' && tempFields[4] === 'X' && tempFields[7] === 'X')\r\n            || (tempFields[2] === 'X' && tempFields[5] === 'X' && tempFields[8] === 'X')\r\n            || (tempFields[3] === 'X' && tempFields[4] === 'X' && tempFields[5] === 'X')\r\n            || (tempFields[0] === 'X' && tempFields[4] === 'X' && tempFields[8] === 'X')\r\n            || (tempFields[2] === 'X' && tempFields[4] === 'X' && tempFields[6] === 'X')) {\r\n            if (window.scenarioFlag === 1) {\r\n                return \"You lose xD\";\r\n            }\r\n            return \"X wins\";\r\n        }\r\n\r\n        if ((tempFields[0] === 'O' && tempFields[1] === 'O' && tempFields[2] === 'O')\r\n            || (tempFields[3] === 'O' && tempFields[4] === 'O' && tempFields[5] === 'O')\r\n            || (tempFields[0] === 'O' && tempFields[3] === 'O' && tempFields[6] === 'O')\r\n            || (tempFields[1] === 'O' && tempFields[4] === 'O' && tempFields[7] === 'O')\r\n            || (tempFields[2] === 'O' && tempFields[5] === 'O' && tempFields[8] === 'O')\r\n            || (tempFields[6] === 'O' && tempFields[7] === 'O' && tempFields[8] === 'O')\r\n            || (tempFields[0] === 'O' && tempFields[4] === 'O' && tempFields[8] === 'O')\r\n            || (tempFields[2] === 'O' && tempFields[4] === 'O' && tempFields[6] === 'O')) {\r\n            if (window.scenarioFlag === 1) {\r\n                return \"You win QQ\";\r\n            }\r\n            return \"O wins\";\r\n        }\r\n\r\n        if ((tempFields[0] !== -1 && tempFields[1] !== -1 && tempFields[2] !== -1)\r\n            && (tempFields[3] !== -1 && tempFields[4] !== -1 && tempFields[5] !== -1)\r\n            && (tempFields[6] !== -1 && tempFields[7] !== -1 && tempFields[8] !== -1)\r\n        ) {\r\n            if (window.scenarioFlag === 1) {\r\n                return \"Nobody wins -  Cannot beat me, cannot beat me, lalalalalalala\";\r\n            }\r\n            return \"Nobody wins. Congrats Nobody\";\r\n        }\r\n    }\r\n\r\n    //Diese Funktion rendert alles und sorgt somit für die Ausgabe. Sie sorgt auch dafür, dass bei jeder Änderung an der Ausgabe, dies sofort auf der WEbseite angezeigt wird\r\n    render() {\r\n        //Feld wird über einen Table aufgebaut. Dieser wird über 3 arrays zusammengepusht. Könnte theoretisch leicht skaliert weden\r\n        let arraybuilder2 = [];\r\n        let arraybuilder1 = [];\r\n        let fieldOutput = []; // die ist das letzte, sprich das Ausgabearray\r\n\r\n        for (let i = 0; i < FIELDS / 3; i++) {\r\n            arraybuilder1.push(<td className=\"tables\">\r\n                {this.inputFields(i * 3)}\r\n            </td>)\r\n            arraybuilder1.push(<td className=\"tables\">\r\n                {this.inputFields(i * 3 + 1)}\r\n            </td>)\r\n            arraybuilder1.push(<td className=\"tables\">\r\n                {this.inputFields(i * 3 + 2)}\r\n            </td>)\r\n\r\n            arraybuilder2.push(<tr className=\"tables\">{arraybuilder1}</tr>);\r\n            arraybuilder1 = [];\r\n        }\r\n\r\n        //fieldOutput enthält nun das gesamte Spielfeld\r\n        fieldOutput.push(<table className=\"tables\">{arraybuilder2}</table>);\r\n\r\n        //Zusammenbauen von den 3 Spieldmodi-Buttons + Resetbuttons zu einem Feld\r\n        let ModeButtons = [];\r\n        ModeButtons.push(<div>\r\n            <div>{this.inputModeField4(12)}{this.inputModeField1(9)} {this.inputModeField2(10)} {this.inputModeField3(11)}</div>\r\n        </div>)\r\n\r\n        //Ermittlung wer am Zug ist und ob jemand gewonnen hat. Ausgabe ob jemand gewonnen hat, erfolgt nur, wenn das Spielt beendet ist - in diesem Fall wird auch nicht mehr ausgegeben, wer am Zug ist\r\n        let tempFields = new Array(FIELDS + 3);\r\n        for (let i = 0; i < 13; i++) {\r\n            tempFields[i] = this.state.fields[i];\r\n        }\r\n        let result = this.result(tempFields)\r\n        let nextPlayer = this.nextPlayer();\r\n\r\n        //gif wird ausgegeben, wenn man gegen den PC verliert oder patt spielt\r\n        let gifAfterGame = [];\r\n        if (result === \"You lose xD\" || result === \"Nobody wins -  Cannot beat me, cannot beat me, lalalalalalala\")\r\n            gifAfterGame.push(<img className=\"image\" src={rr} alt=\"logo\"/>);\r\n\r\n        //Rückgabe der tatsächlichen Ausgabe\r\n        return (<div className=\"PaulsBody\">\r\n            <h1 className=\"Paulh1\">Tic-Tac-Toe</h1>\r\n            <div> {fieldOutput}</div>\r\n            <div className=\"textResult\">{result}</div>\r\n            <div className=\"textNextPlayer\">{nextPlayer}</div>\r\n            <div className=\"positionModeButtons\"><br/>{ModeButtons}<br/></div>\r\n            {gifAfterGame}\r\n        </div>);\r\n    }\r\n}\r\n\r\n\r\n//über diese Funktion wird ein passendes Feld ermittelt. Der Parameter tempFields2 ist eine Kopie des aktuellen Felds.\r\n//Die 3 Token werden genutzt um verschiedene Szenarien aufzubauen. Sprich ist  token='X' und token2 = 'X' und der token3 ='-1' werden alle möglichen Möglichkeiten\r\n// durchitiert und nach so einem Szenario gesucht. Sobald es gefunden wurde, wird das zu befüllende Feld zurückgegeben (so ein Feld würde zu einem Gewinn führen).\r\n// Sucht man mit token='X' und token2 = '-1' und der token3 ='-1' so sucht man z.B. nach einem 'X' belegten Feld, wo eine 3er Kette für einen Sieg noch aufgebaut werden kann (auch wenn zwei Möglichkeitne bestehen, wird nur ein Feld zurückgegeben.)\r\n// wird kein passendes Feld gefunden, wird \"-1\" zurückgegeben und es ist bekannt, dass es ein Feld unter dem Szenario nicht vorhanden ist\r\nfunction estimateBestField(tempFields2, token, token2, token3) {\r\n    let j = 0;\r\n    let tempFields = tempFields2;\r\n    if (tempFields[4] === -1) {\r\n        return 4;\r\n    }\r\n    while (true) {\r\n        if (tempFields[j] === token && tempFields[j + 1] === token2 && tempFields[j + 2] === token3) {\r\n            return (j + 2);\r\n        }\r\n        j = j + 3;\r\n        if (j === 9)\r\n            break;\r\n    }\r\n\r\n    j = 0;\r\n    while (true) {\r\n        if (tempFields[j] === token && tempFields[j + 2] === token2 && tempFields[j + 1] === token3) {\r\n            return j + 1;\r\n        }\r\n        j = j + 3;\r\n        if (j === 9)\r\n            break;\r\n    }\r\n\r\n    j = 0;\r\n    while (true) {\r\n        if (tempFields[j + 1] === token && tempFields[j + 2] === token2 && tempFields[j] === token3) {\r\n            return j;\r\n        }\r\n        j = j + 3;\r\n        if (j === 9)\r\n            break;\r\n    }\r\n\r\n    j = 0;\r\n    while (true) {\r\n        if (tempFields[j] === token && tempFields[j + 3] === token2 && tempFields[j + 6] === token3) {\r\n            return j + 6;\r\n        }\r\n        j++;\r\n        if (j === 3)\r\n            break;\r\n    }\r\n\r\n    j = 3;\r\n    while (true) {\r\n        if (tempFields[j] === token && tempFields[j + 3] === token2 && tempFields[j - 3] === token3) {\r\n            return j - 3;\r\n        }\r\n        j++;\r\n        if (j === 6)\r\n            break;\r\n    }\r\n\r\n    j = 6;\r\n    while (true) {\r\n        if (tempFields[j] === token && tempFields[j - 6] === token2 && tempFields[j - 3] === token3) {\r\n            return j - 3;\r\n        }\r\n        j++;\r\n        if (j === 9)\r\n            break;\r\n    }\r\n\r\n    if (tempFields[0] === token && tempFields[4] === token2 && tempFields[8] === token3) {\r\n        return 8;\r\n    }\r\n    if (tempFields[4] === token && tempFields[8] === token2 && tempFields[0] === token3) {\r\n        return 0;\r\n    }\r\n    if (tempFields[0] === token && tempFields[8] === token2 && tempFields[4] === token3) {\r\n        return 4;\r\n    }\r\n    if (tempFields[2] === token && tempFields[4] === token2 && tempFields[6] === token3) {\r\n        return 6;\r\n    }\r\n    if (tempFields[2] === token && tempFields[6] === token2 && tempFields[4] === token3) {\r\n        return 4;\r\n    }\r\n    if (tempFields[6] === token && tempFields[4] === token2 && tempFields[2] === token3) {\r\n        return 2;\r\n    }\r\n    return -1;\r\n}\r\n\r\n//Klassenbaustein für den Spielmodus 2-Player\r\nclass Mode1 extends React.Component {\r\n    render() {\r\n        return (\r\n            <div\r\n                className=\"general\"\r\n            >\r\n                <button\r\n                    id=\"mode1\"\r\n                    onClick={() => this.props.onClick()}\r\n                >\r\n                    2-Player\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//Klassenbaustein für den Spielmodus  1-Player (Crazy Robot starts)\r\nclass Mode2 extends React.Component {\r\n    render() {\r\n        return (\r\n            <div\r\n                className=\"general\"\r\n            >\r\n                <button\r\n                    id=\"mode2\"\r\n                    onClick={() => this.props.onClick()}\r\n                >\r\n                    1-Player (Crazy Robot starts)\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//Klassenbaustein für den Spielmodus  1-Player (You start)\r\nclass Mode3 extends React.Component {\r\n    render() {\r\n        return (\r\n            <div\r\n                className=\"general\"\r\n            >\r\n                <button\r\n                    id=\"mode3\"\r\n                    onClick={() => this.props.onClick()}\r\n                >\r\n                    1-Player (You start)\r\n                </button>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n//Klassenbaustein um den aktiven Spielmodus zurückzusetzen\r\nclass Reset extends React.Component {\r\n    render() {\r\n        return (\r\n            <div\r\n                className=\"general\"\r\n            >\r\n                <button\r\n                    id=\"reset\"\r\n                    onClick={() => this.props.onClick()}\r\n                >\r\n                   reset\r\n                </button>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n","import React, {Component} from \"react\";\r\nimport {Table, TableRow, TableHeader} from 'grommet';\r\nimport './ValesMiniGame.css';\r\n\r\n/*Contains ControlPanel including the following Classes*/\r\n/*  -Scoreboard                                        */\r\n/*Externals:     Table by grommet                       */\r\n/*Component locally saving Highscores including a name and the corresponding score */\r\n\r\n\r\nexport default class Scoreboard extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {entries: []};\r\n        this.addEntry = this.addEntry.bind(this);\r\n        this.sort = this.sort.bind(this);\r\n        this.addHtml = this.addHtml.bind(this);\r\n        this.addDummies = this.addDummies.bind(this);\r\n    }\r\n    render(){\r\n        let entries = []; //local array for render function\r\n        for(let i=0; i<this.state.entries.length; i++){\r\n            entries[i] = this.addHtml(this.state.entries[i],i); //entries including html tags\r\n        }\r\n        return(\r\n            <div className=\"Scoreboard\">\r\n                <p className=\"headline\">Highscores</p>\r\n                <Table responsive={false}>\r\n                    <TableHeader onSort={this.sort} labels={['Name','Score']} sortAscending={false}/>\r\n                    <tbody>\r\n                    {entries}\r\n                    </tbody>\r\n                </Table>\r\n                {/*<input type=\"button\" onClick={this.addDummies} value=\"Insert dummies\"/>*/}\r\n            </div>\r\n        );\r\n    }\r\n    addDummies(){       //Testing function\r\n        let random = Math.floor(Math.random()*20);\r\n        this.addEntry({name: \"P1\", score: random});\r\n        this.addEntry({name: \"P2\", score: 2*random});\r\n        this.addEntry({name: \"P3\", score: 3*random});\r\n    }\r\n    addHtml(entry, key){\r\n        return <TableRow key={key}><td>{entry.name}</td><td>{entry.score}</td></TableRow>;\r\n    }\r\n    addEntry(entry){\r\n        let tmp_entries = this.state.entries == null ? [] : this.state.entries;\r\n        tmp_entries.push({name: entry.name, score: entry.score});\r\n        this.sort();\r\n        this.setState({entries: tmp_entries});\r\n    }\r\n    sort(){\r\n        let tmp_entries = this.state.entries == null ? [] : this.state.entries;\r\n        tmp_entries.sort(this.entryComparator);\r\n        this.setState({entries: tmp_entries});\r\n    }\r\n    entryComparator(entry1, entry2){        //Deciding algorithm for sort\r\n        if(entry1.score > entry2.score)return -1;\r\n        else if(entry1.score < entry2.score)return 1;\r\n        else return 0;\r\n    }\r\n}","import React, {Component} from \"react\";\r\nimport './ValesMiniGame.css';\r\n\r\n/*Contains ControlPanel including the following Classes*/\r\n/*  -ControlPanel*/\r\n/*  -Counter     */\r\n/*  -Countdown   */\r\n\r\nexport default class ControlPanel extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {buttonText: \"Start Game!\"};\r\n        this.setRunning = this.setRunning.bind(this);\r\n        this.countDown = React.createRef();\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"ControlPanel\">\r\n                <input type=\"button\" id=\"startButton\" className=\"ControlPanelChild button important\" onClick={this.setRunning} value={this.state.buttonText} />\r\n                <div className=\"ControlPanelChild\"><p className=\"headline\">Time<Countdown ref={this.countDown} time={10} onComplete={this.props.app.gameEnd}/></p></div>\r\n                <div className=\"ControlPanelChild\"><p className=\"headline\">Points<Counter count={this.props.count} /></p></div>\r\n            </div>\r\n        );\r\n    }\r\n    setRunning(){   //Wrapper-function for the Countdown\r\n        this.recursiveDraw(3, this.props.startGame , this, \"Game Running!\");\r\n    }\r\n    recursiveDraw(number, cb, context, endMsg){     //recursive Countdown\r\n        const startButton = document.getElementById('startButton');\r\n        if(startButton!=null){\r\n            startButton.disabled = true;\r\n        }\r\n        let text = number === 0 ? endMsg : number;\r\n        context.setState(() => {\r\n            return {buttonText: text};\r\n        });\r\n        if(number === 0){\r\n            cb();\r\n        }else {\r\n            setTimeout((() => {context.recursiveDraw(number - 1, cb, context, endMsg)}), 1000);\r\n        }\r\n    }\r\n}\r\n\r\nclass Counter extends Component{\r\n    render(){\r\n        return(\r\n            //Completely controlled by parent over props\r\n            <span id=\"counter\" style={{margin: \"10px\"}} className=\"important\">{this.props.count}</span>\r\n        );\r\n    }\r\n}\r\n\r\nclass Countdown extends Component{\r\n    constructor(props){\r\n        super();\r\n        this.state = {secs: props.time};\r\n        this.countDown = this.countDown.bind(this);\r\n        this.start = this.start.bind(this);\r\n    }\r\n    render(){\r\n        return(\r\n            <span style={{margin: \"10px\"}} className=\"important\">{this.state.secs}</span>\r\n        );\r\n    }\r\n    countDown(){\r\n        if(this.state.secs === 1){\r\n            this.props.onComplete();\r\n        }\r\n        else{\r\n            this.setState({secs: this.state.secs-1});\r\n            setTimeout(this.countDown, 1000);\r\n        }\r\n    }\r\n    start(){\r\n        this.reset();\r\n        setTimeout(this.countDown, 1000);\r\n    }\r\n    reset(){\r\n        this.setState({secs: this.props.time});\r\n    }\r\n}","import React, {Component} from \"react\";\r\nimport {settings} from './ValesMiniGame'\r\nimport './ValesMiniGame.css';\r\n\r\n\r\nexport default class Field extends Component{\r\n    constructor(){\r\n        super();\r\n        this.tiles = React.createRef();\r\n    }\r\n    render(){\r\n        let tiles = [];\r\n        let count = 1;\r\n        let i = 0;\r\n        //loop to create array with html tags, including linebreaks (hr)\r\n        while(count <= settings.dimension*settings.dimension){\r\n            if(count % settings.dimension === 1 && i!==0){\r\n                tiles[i] = <hr key={i}/>;\r\n                i++;\r\n            }\r\n            tiles[i] = <Tile ref={this.tiles.count} tileNumber={count} key={i} increaseCounter={this.props.increaseCounter} app={this.props.app}/>;\r\n            i++;\r\n            count++;\r\n        }\r\n        return(\r\n            <div id=\"Field\">\r\n                {tiles}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Tile extends Component {\r\n    constructor(){\r\n        super();\r\n        this.setActive = this.setActive.bind(this);\r\n    }\r\n    render(){\r\n        return(\r\n            <button className=\"Tile\" onClick={this.setActive} id={this.props.tileNumber} />\r\n        );\r\n    }\r\n    setActive(){\r\n        let callingTile = document.getElementById(this.props.tileNumber);\r\n        if(callingTile.classList.contains('activeTile')) {      //If yellow tile gets clicked\r\n            let tileNumber=0;\r\n            do {    //Prevent, that the active tile is the same twice in a row\r\n                tileNumber = Math.floor(Math.random() * (settings.dimension * settings.dimension-1));\r\n            }while(tileNumber === this.props.app.state.lastActiveTile);\r\n            this.props.app.state.lastActiveTile = tileNumber;\r\n            let tiles = document.getElementsByClassName('Tile');\r\n            try {\r\n                //Workaround to make animation look smooth\r\n                callingTile.style.background = \"#EFDA51\";       //Same color as activeTile\r\n                callingTile.classList.remove('activeTile');\r\n                setTimeout(()=>{\r\n                    let callingTile = document.getElementById(this.props.tileNumber);\r\n                    callingTile.style.transform = \"\";\r\n                    callingTile.style.background = \"#466496\";\r\n                },300);            //Half of the time defined in css property transition, so the color changes in the middle of the animation\r\n                callingTile.style.transform = \"rotateX(180deg)\";\r\n                tiles[tileNumber+1].classList.add(\"activeTile\");\r\n                this.props.increaseCounter();\r\n            }catch(e){}\r\n        }\r\n    }\r\n}\r\n","import React, {Component} from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport './popup.css'\r\n\r\n//Usage: message: String       Nachricht, die über das Popup angezeigt wird (Zeilenumbruch durch \\n)\r\n//\r\n//       buttons: 2D-Array     Definiert, welche und wie viele Buttons im Popup sein sollen.\r\n//                             Schema:   [[\"button1Text\",onclick1Function],[\"button2Text\",onclick2Function]]\r\n//\r\n//       input: boolean        default: false. Entscheidet, ob ein Eingabefeld im Popup sein soll.\r\n//                             Zugriff auf den Inhalt z.B. über document.getElementById('popup_input').value\r\n\r\nfunction openPopup(message, buttons, input=false) {\r\n    ReactDOM.render(<Popup message={message} buttons={buttons} input={input}/>, document.getElementById('popup_container'));\r\n}\r\n\r\nclass Popup extends Component{\r\n    render(){\r\n        //create buttons' html tags from given button information\r\n        const buttons = this.props.buttons.map((button, index)=><button type=\"button\" key={button[0]} className=\"button\" id={\"popup_button_\" + index} onClick={button[1]} style={{height: \"3rem\"}}>{button[0]}</button>);\r\n        //render input-field?\r\n        const input = this.props.input ? <input id=\"popup_input\" type=\"text\"/> : null;\r\n        //Workaround for an animation\r\n        setTimeout(()=>{document.getElementsByClassName(\"popup\")[0].classList.add(\"popup_visible\"); },1);\r\n        return (\r\n            <form className=\"popup\" onSubmit={this.props.buttons[this.props.buttons.length-1][1]}>\r\n                <div style={{fontSize: \"larger\", fontWeight: \"bold\", whiteSpace: \"pre-wrap\", textAlign: \"center\"}}>{this.props.message}</div>\r\n                {input}\r\n                <div style={{display: 'flex', width: '100%'}}>{buttons}</div>\r\n            </form>\r\n        );\r\n    }\r\n    componentDidMount(){\r\n        const input = document.getElementById('popup_input');\r\n        if(input !== null)input.focus();\r\n        document.getElementById(\"root\").style.opacity = \"0.3\";\r\n        //Make popup close, when clicked next to the popup\r\n        //click Listener on document\r\n        this.documentEventListener = document.getElementById('root').addEventListener(\"click\", ()=>{\r\n            const cancelButton = document.getElementById('popup_button_0');\r\n            if(cancelButton!==null)cancelButton.click();\r\n        });\r\n    }\r\n    componentWillUnmount(){\r\n        document.getElementById('root').style.opacity = 1;\r\n        document.removeEventListener(\"click\",this.documentEventListener);\r\n    }\r\n}\r\n\r\nexport default openPopup;","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport './ValesMiniGame.css';\r\nimport Scoreboard from './Scoreboard'\r\nimport ControlPanel from './ControlPanel'\r\nimport Field from './Field'\r\nimport openPopup from '../ShareComponents/popup'\r\n\r\n/*Top level component rendering all other Components, also */\r\n/*  -holding the current Score, given down via props*/\r\n\r\nexport const settings = {dimension: 6};\r\n\r\nexport default class ValesMiniGame extends Component {\r\n    constructor(){\r\n        super();\r\n        this.increaseCounter = this.increaseCounter.bind(this);\r\n        this.startGame = this.startGame.bind(this);\r\n        this.reset = this.reset.bind(this);\r\n        this.gameEnd = this.gameEnd.bind(this);\r\n        this.state = {count: 0, lastActiveTile: 0, lastCount: 0};\r\n        this.controlPanel = React.createRef();\r\n        this.scoreboard = React.createRef();\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <ControlPanel app={this} ref={this.controlPanel} startGame={this.startGame} count={this.state.count} />\r\n                <div className=\"MainView\">\r\n                    <div style={{display: 'flex', justifyContent: 'center', width: '100%'}}>\r\n                        <Field app={this} increaseCounter={this.increaseCounter} />\r\n                    </div>\r\n                    <Scoreboard ref={this.scoreboard}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    componentDidMount(){    //Load state from parent Store when tab is changed to vale\r\n        if(this.props.parent.store.vale.scoreboard_entries !== null) {\r\n            this.scoreboard.current.setState({entries: this.props.parent.store.vale.scoreboard_entries});\r\n        }\r\n    }\r\n    componentWillUnmount(){ //Save state to parent Store when tab is changed from vale\r\n        this.props.parent.store.vale.scoreboard_entries = this.scoreboard.current.state.entries;\r\n    }\r\n    increaseCounter(){\r\n        this.setState({count: this.state.count+1});\r\n    }\r\n    startGame(){\r\n        //Starting Countdown\r\n        this.controlPanel.current.countDown.current.start();\r\n        //activate next yellow tile\r\n        let i = Math.floor(Math.random() * 8);\r\n        let tiles = document.getElementsByClassName(\"Tile\");\r\n        tiles[i].classList.add(\"activeTile\");\r\n        //Re-enable all tiles\r\n        for(let i=0;i<settings.dimension*settings.dimension; i++){\r\n            tiles[i].disabled = false;\r\n        }\r\n    }\r\n    gameEnd(){\r\n        //Disable all tiles\r\n        const tiles = document.getElementsByClassName('Tile');\r\n        for(let i=0;i<settings.dimension*settings.dimension; i++){\r\n            tiles[i].disabled = true;\r\n        }\r\n        this.controlPanel.current.setState({buttonText: \"Game Over!\"});\r\n        //Popup\r\n        this.setState({lastCount: this.state.count});\r\n        openPopup(\"You reached \" + this.state.lastCount + \" Points!\\nEnter your name\",\r\n            [[\"Cancel\",()=>{\r\n                //Animation\r\n                const field = document.getElementById('Field');\r\n                field.style.transition = \"transform 1s ease-in-out\";\r\n                field.style.transform = \"rotateX(360deg)\";\r\n                setTimeout(()=>{field.style.transition = \"\";field.style.transform = \"rotateX(0deg)\"},1000);\r\n                //popup\r\n                ReactDOM.unmountComponentAtNode(document.getElementById('popup_container'));\r\n            }],[\"Submit\",(event)=>{\r\n                //Animation\r\n                const field = document.getElementById('Field');\r\n                field.style.transition = \"transform 1s ease-in-out\";\r\n                field.style.transform = \"rotateX(360deg)\";\r\n                setTimeout(()=>{field.style.transition = \"\";field.style.transform = \"rotateX(0deg)\"},1000);\r\n                //popup\r\n                event.preventDefault();\r\n                const input = document.getElementById('popup_input');\r\n                this.scoreboard.current.addEntry({name: input.value === \"\" ? \"Unnamed\" : input.value, score: this.state.lastCount});\r\n                ReactDOM.unmountComponentAtNode(document.getElementById('popup_container'));\r\n            }]],true);\r\n        this.reset();\r\n    }\r\n    reset(){\r\n        //Deactivate active Tile\r\n        let tiles = document.getElementsByClassName('Tile');\r\n        for(let i=0; i<settings.dimension*settings.dimension; i++){\r\n            if(tiles[i].classList.contains('activeTile')){\r\n                tiles[i].classList.remove('activeTile');\r\n            }\r\n        }\r\n        //Reset counter\r\n        this.setState({count: 0});\r\n        //Reset Button\r\n        document.getElementById('startButton').disabled = false;\r\n        this.controlPanel.current.setState({buttonText: \"Start Game!\"});\r\n        //Reset timer\r\n        this.controlPanel.current.countDown.current.reset();\r\n    }\r\n}","import React, { Component } from \"react\";\r\n\r\nclass Field extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = { color: \"blanc\" };\r\n    this.setColor = this.setColor.bind(this);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"field\">\r\n        <div className={this.state.color} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  setColor(newColor) {\r\n    this.setState({ color: newColor });\r\n  }\r\n}\r\n\r\nexport default Field;\r\n","import React, { Component } from \"react\";\r\nimport Field from \"./field\";\r\n\r\nclass Column extends Component {\r\n  constructor(props) {\r\n    super();\t\r\n    this.state = {\r\n\t\t//array fields becomes the container for the field components\r\n      fields: [\r\n        { id: 0 },\r\n        { id: 1 },\r\n        { id: 2 },\r\n        { id: 3 },\r\n        { id: 4 },\r\n        { id: 5 }\r\n      ],\r\n\t  //variable is for checking weather the column is full and no player can place the next stone in it \r\n      enabled: true\r\n    };\r\n\t\r\n\t//assigns the references of each field in an array\r\n    this.fields = [];\r\n    for (let i = 0; i <= 5; i++) {\r\n      this.fields[i] = React.createRef();\r\n    }\r\n\t//contains the color-status of each field component\r\n    this.fieldArray = [];\r\n    for (let i = 0; i <= 5; i++) {\r\n      this.fieldArray[i] = \"blanc\";\r\n    }\r\n    this.handleTurn = this.handleTurn.bind(this);\r\n    this.getLastBlanc = this.getLastBlanc.bind(this);\r\n    this.displayTriangleColor = this.displayTriangleColor.bind(this);\r\n    this.resetFields = this.resetFields.bind(this);\r\n  }\r\n\r\n  resetFields() {\r\n    for (let i = 0; i <= 5; i++) {\r\n      this.fieldArray[i] = \"blanc\";\r\n      this.fields[i].current.setColor(\"blanc\");\r\n    }\r\n    this.setState({ enabled: true });\r\n  }\r\n\r\n  getLastBlanc() {\r\n    let i = 0;\r\n    for (; i <= 5; i++) {\r\n      if (this.fields[i].current.state.color !== \"blanc\") {\r\n        break;\r\n      }\r\n    }\r\n    return i - 1;\r\n  }\r\n  \r\n\t//onclick Event, when player set ones stone in a column\r\n  handleTurn() {\r\n    if (this.getLastBlanc() <= 5 && this.getLastBlanc() >= 0) {\r\n      //sets the color in the field component\r\n      this.fields[this.getLastBlanc()].current.setColor(this.props.color);\r\n\r\n      //sets the color in the game Array to compare with the rules\r\n      this.fieldArray[this.getLastBlanc()] = this.props.color;\r\n      this.props.setGameArray();\r\n\r\n      //enables button\r\n      if (this.getLastBlanc() === 0) {\r\n        this.setState({ enabled: false });\r\n        this.props.buttonEnabled[this.props.id] = false;\r\n        this.props.checkDraw();\r\n      }\r\n\r\n      //ckeck if player wins or if its a draw\r\n      let win = this.props.checkWin(this.props.id, this.getLastBlanc());\r\n      if (win) {\r\n        this.props.setWinner(this.props.color);\r\n      }\r\n\r\n      //switches the player color\r\n      this.props.switchPlayer();\r\n    }\r\n  }\r\n\r\n  displayTriangleColor() {\r\n    let classes =\r\n      this.state.enabled === true\r\n        ? this.props.getTriangleColor()\r\n        : \"triangleButton_gray\";\r\n    return classes;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"column\">\r\n        <button\r\n          onClick={this.handleTurn}\r\n          className={this.displayTriangleColor()}\r\n          id={this.props.id}\r\n        />\r\n        {this.state.fields.map(field => (\r\n          <Field\r\n            ref={this.fields[field.id]}\r\n            key={field.id}\r\n            color={field.color}\r\n            id={field.id}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Column;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Modal extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = { reset: false };\r\n    this.display = this.display.bind(this);\r\n  }\r\n\r\n  display() {\r\n    let display = this.props.winner === \"blanc\" ? \"none\" : \"block\";\r\n    return display;\r\n  }\r\n\r\n  render() {\r\n    let modal = document.getElementById(\"myModal\");\r\n    let btn = document.getElementById(\"close\");\r\n    if (this.props.winner !== \"blanc\" || this.props.draw === true) {\r\n      modal.style.display = \"block\";\r\n      btn.onclick = function() {\r\n        modal.style.display = \"none\";\r\n      };\r\n    }\r\n    if (this.props.draw === false) {\r\n      return (\r\n        <div id=\"myModal\" className=\"modal\">\r\n          <div className={this.props.displayWinner()}>\r\n            <p>Spieler {this.props.colorToGerman()} gewinnt!!!</p>\r\n            <button onClick={this.props.resetAll} id=\"close\">\r\n              OK\r\n            </button>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div id=\"myModal\" className=\"modal\">\r\n          <div className=\"draw\">\r\n            <p>Unentschieden!</p>\r\n            <button onClick={this.props.resetAll} id=\"close\">\r\n              OK\r\n            </button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n","import React, { Component } from \"react\";\r\nimport Column from \"./column\";\r\nimport Modal from \"./modal\";\r\nimport '../basics.css'\r\n\r\nclass Game extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n\t\t//array culumns becomes the container for the column components\r\n      columns: [\r\n        { id: 0 },\r\n        { id: 1 },\r\n        { id: 2 },\r\n        { id: 3 },\r\n        { id: 4 },\r\n        { id: 5 },\r\n        { id: 6 }\r\n      ],\r\n      playerColor: \"yellow\",\r\n\t  //variable for checking the winner\r\n      winner: \"blanc\",\r\n\t  //variable to check weather its a draw\r\n      draw: false\r\n    };\r\n\t//assigns the references of each field in an array\r\n    this.columns = [];\r\n    for (let i = 0; i <= 6; i++) {\r\n      this.columns[i] = React.createRef();\r\n    }\r\n    this.modal = React.createRef();\r\n\t//\"gameArray\" contains the color statuses of each column\r\n    this.gameArray = [];\r\n    this.buttonEnabled = [true, true, true, true, true, true, true];\r\n    this.setGameArray = this.setGameArray.bind(this);\r\n    this.switchPlayer = this.switchPlayer.bind(this);\r\n    this.getTriangleColor = this.getTriangleColor.bind(this);\r\n    this.checkVertical = this.checkVertical.bind(this);\r\n    this.checkHorizontal = this.checkHorizontal.bind(this);\r\n    this.checkDiagonal = this.checkDiagonal.bind(this);\r\n    this.checkWin = this.checkWin.bind(this);\r\n    this.setWinner = this.setWinner.bind(this);\r\n    this.displayWinner = this.displayWinner.bind(this);\r\n    this.colorToGerman = this.colorToGerman.bind(this);\r\n    this.resetAll = this.resetAll.bind(this);\r\n    this.checkDraw = this.checkDraw.bind(this);\r\n  }\r\n\r\n  setWinner(color) {\r\n    this.setState({ winner: color });\r\n  }\r\n\t\r\n\t//set the color statusses of each column in the array\r\n  setGameArray() {\r\n    for (let i = 0; i <= 6; i++) {\r\n      this.gameArray[i] = this.columns[i].current.fieldArray;\r\n    }\r\n    console.log(this.gameArray);\r\n    console.log(this.state.winner);\r\n  }\r\n\r\n  switchPlayer() {\r\n    if (this.state.playerColor === \"red\") {\r\n      this.setState({ playerColor: \"yellow\" });\r\n    }\r\n    if (this.state.playerColor === \"yellow\") {\r\n      this.setState({ playerColor: \"red\" });\r\n    }\r\n    return this.state.playerColor;\r\n  }\r\n\r\n  getTriangleColor() {\r\n    let classes = \"triangleButton_\";\r\n    classes += this.state.playerColor === \"red\" ? \"red\" : \"yellow\";\r\n    return classes;\r\n  }\r\n\r\n  displayWinner() {\r\n    let classes = \"winner_\";\r\n    classes += this.state.winner;\r\n    return classes;\r\n  }\r\n\r\n  //checks if the rule for a vertical win is true or false\r\n  checkVertical(columnIndex, fieldIndex) {\r\n    let color = this.gameArray[columnIndex][fieldIndex];\r\n    if (fieldIndex >= 3) {\r\n      return false;\r\n    } else {\r\n      for (let i = 1; i <= 3; i++) {\r\n        if (this.gameArray[columnIndex][fieldIndex + i] !== color) {\r\n          return false;\r\n        } else {\r\n          continue;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\t//checks if the rule for a horizontal win is true or false\r\n  checkHorizontal(columnIndex, fieldIndex) {\r\n    let color = this.gameArray[columnIndex][fieldIndex];\r\n    let counter = 1;\r\n    let left = 1;\r\n    let right = 1;\r\n    while (\r\n      columnIndex - left >= 0 &&\r\n      this.gameArray[columnIndex - left][fieldIndex] === color\r\n    ) {\r\n      counter++;\r\n      left++;\r\n    }\r\n    while (\r\n      columnIndex + right <= 6 &&\r\n      this.gameArray[columnIndex + right][fieldIndex] === color\r\n    ) {\r\n      counter++;\r\n      right++;\r\n    }\r\n    if (counter < 4) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\t\r\n\t//checks if the rule for a diagonal win is true or false\r\n  checkDiagonal(columnIndex, fieldIndex) {\r\n    let color = this.gameArray[columnIndex][fieldIndex];\r\n    let counterLeftUp = 1;\r\n    let counterLeftDown = 1;\r\n    let left = 1;\r\n    let right = 1;\r\n    let up = 1;\r\n    let down = 1;\r\n\r\n    //check upper left to lower right\r\n    while (\r\n      columnIndex - left >= 0 &&\r\n      fieldIndex - up >= 0 &&\r\n      this.gameArray[columnIndex - left][fieldIndex - up] === color\r\n    ) {\r\n      counterLeftUp++;\r\n      left++;\r\n      up++;\r\n    }\r\n    while (\r\n      columnIndex + right <= 6 &&\r\n      fieldIndex + down <= 5 &&\r\n      this.gameArray[columnIndex + right][fieldIndex + down] === color\r\n    ) {\r\n      counterLeftUp++;\r\n      right++;\r\n      down++;\r\n    }\r\n\r\n    // check lower left to upper right\r\n    left = 1;\r\n    right = 1;\r\n    up = 1;\r\n    down = 1;\r\n    while (\r\n      columnIndex - left >= 0 &&\r\n      fieldIndex + down <= 5 &&\r\n      this.gameArray[columnIndex - left][fieldIndex + down] === color\r\n    ) {\r\n      counterLeftDown++;\r\n      left++;\r\n      down++;\r\n    }\r\n    while (\r\n      columnIndex + right <= 6 &&\r\n      fieldIndex - up >= 0 &&\r\n      this.gameArray[columnIndex + right][fieldIndex - up] === color\r\n    ) {\r\n      counterLeftDown++;\r\n      right++;\r\n      up++;\r\n    }\r\n\r\n    if (counterLeftUp < 4 && counterLeftDown < 4) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  checkWin(columnIndex, fieldIndex) {\r\n    let vertical = this.checkVertical(columnIndex, fieldIndex);\r\n    let horizontal = this.checkHorizontal(columnIndex, fieldIndex);\r\n    let diagonal = this.checkDiagonal(columnIndex, fieldIndex);\r\n    if (vertical || horizontal || diagonal) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  checkDraw() {\r\n    let check = false;\r\n    for (let k = 0; k <= 6; k++) {\r\n      check = check || this.buttonEnabled[k];\r\n    }\r\n    if (check === false) {\r\n      this.setState({ draw: true });\r\n    }\r\n  }\r\n\t\r\n\t//translate the playorcolor in the code to german for display purposes\r\n  colorToGerman() {\r\n    let color = this.state.winner === \"red\" ? \"Rot\" : \"Gelb\";\r\n    return color;\r\n  }\r\n\r\n  resetAll() {\r\n    this.setState({ playerColor: \"yellow\", winner: \"blanc\", draw: false });\r\n    for (let i = 0; i <= 6; i++) {\r\n      this.columns[i].current.resetFields();\r\n      this.buttonEnabled[i] = true;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"game\">\r\n        {this.state.columns.map(column => (\r\n          <Column\r\n            key={column.id}\r\n            id={column.id}\r\n            ref={this.columns[column.id]}\r\n            getTriangleColor={this.getTriangleColor}\r\n            switchPlayer={this.switchPlayer}\r\n            color={this.state.playerColor}\r\n            setGameArray={this.setGameArray}\r\n            checkWin={this.checkWin}\r\n            setWinner={this.setWinner}\r\n            checkDraw={this.checkDraw}\r\n            buttonEnabled={this.buttonEnabled}\r\n          />\r\n        ))}\r\n        <Modal\r\n          ref={this.modal}\r\n          resetAll={this.resetAll}\r\n          colorToGerman={this.colorToGerman}\r\n          displayWinner={this.displayWinner}\r\n          winner={this.state.winner}\r\n          draw={this.state.draw}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React, {Component} from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport './popup.css'\r\n\r\n//Usage: message: String       Nachricht, die über das Popup angezeigt wird (Zeilenumbruch durch \\n)\r\n//\r\n//       buttons: 2D-Array     Definiert, welche und wie viele Buttons im Popup sein sollen.\r\n//                             Schema:   [[\"button1Text\",onclick1Function],[\"button2Text\",onclick2Function]]\r\n//\r\n//       input: boolean        default: false. Entscheidet, ob ein Eingabefeld im Popup sein soll.\r\n//                             Zugriff auf den Inhalt z.B. über document.getElementById('popup_input').value\r\n\r\nfunction openPopup(message, buttons, input=false) {\r\n    ReactDOM.render(<Popup message={message} buttons={buttons} input={input}/>, document.getElementById('popup_container'));\r\n}\r\n\r\nclass Popup extends Component{\r\n    render(){\r\n        //create buttons' html tags from given button information\r\n        const buttons = this.props.buttons.map((button, index)=><button type=\"button\" key={button[0]} className=\"button\" id={\"popup_button_\" + index} onClick={button[1]} style={{height: \"3rem\"}}>{button[0]}</button>);\r\n        //render input-field?\r\n        //const input = this.props.input ? <input id=\"popup_input\" type=\"text\"/> : null;\r\n        //Workaround for an animation\r\n        setTimeout(()=>{document.getElementsByClassName(\"popup\")[0].classList.add(\"popup_visible\"); },1);\r\n        return (\r\n            <form className=\"popup\" onSubmit={this.props.buttons[this.props.buttons.length-1][1]}>\r\n                <div style={{fontSize: \"larger\", fontWeight: \"bold\", whiteSpace: \"pre-wrap\", textAlign: \"center\"}}>{this.props.message}</div>\r\n                <div style={{display: 'flex', width: '100%'}}>{buttons}</div>\r\n            </form>\r\n        );\r\n    }\r\n    componentDidMount(){\r\n        const input = document.getElementById('popup_input');\r\n        if(input !== null)input.focus();\r\n        document.getElementById(\"root\").style.opacity = \"0.3\";\r\n        //Make popup close, when clicked next to the popup\r\n        //click Listener on document\r\n        this.documentEventListener = document.getElementById('root').addEventListener(\"click\", ()=>{\r\n            const cancelButton = document.getElementById('popup_button_0');\r\n            if(cancelButton!==null)cancelButton.click();\r\n        });\r\n    }\r\n    componentWillUnmount(){\r\n        document.getElementById('root').style.opacity = 1;\r\n        document.removeEventListener(\"click\",this.documentEventListener);\r\n    }\r\n}\r\n\r\nexport default openPopup;","import React, { Component } from 'react';\r\nimport './style.css';\r\nimport ArrowKeysReact from 'arrow-keys-react';\r\nimport ReactDOM from \"react-dom\";\r\nimport openPopup from '../ShareComponents/popup-tetris'\r\n\r\nconst Board_HEIGHT = 20;\r\nconst Board_WIDTH = 10;\r\nconst direction = { \"NORTH\": 1, \"EAST\": 2, \"SOUTH\": 3, \"WEST\": 4 }\r\nconst movement = { \"DOWN\": 1, \"LEFT\": 2, \"RIGHT\": 3 }\r\nconst rotationType = { \"AXIS\": 1, \"DIAGONAL\": 2 }\r\nconst colors = { \"I\": \"grayBox\", \"J\": \"greenBox\", \"L\": \"blueBox\", \"O\": \"yellowBox\", \"Z\": \"cyanBox\", \"T\": \"redBox\", \"S\": \"pinkBox\", \"BLANK\": \"whiteBox\" }\r\nconst defaultSquareClass = \"square\";\r\nObject.freeze(direction);\r\nObject.freeze(movement);\r\nObject.freeze(rotationType);\r\nObject.freeze(colors);\r\n\r\nclass InformationBoard extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = { buttonText: \"Start\" };\r\n        this.time_ref = React.createRef();\r\n    }\r\n    render() {\r\n        return (<Time ref={this.time_ref} />);\r\n    }\r\n\r\n}\r\nclass Time extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = { secs: 0, gamestatus: true};\r\n        this.timer = this.timer.bind(this);\r\n        this.start = this.start.bind(this);\r\n    }\r\n    render() {\r\n        return (\r\n                <span> {this.state.secs}</span>\r\n        );\r\n    }\r\n    timer() {\r\n        if(this.state.gamestatus === false){\r\n            this.reset();\r\n            return this.state.secs;\r\n        }\r\n        this.setState({ secs: this.state.secs + 1 });\r\n        setTimeout(this.timer, 1000);\r\n\r\n    }\r\n    start() {\r\n        this.reset();\r\n        setTimeout(this.timer, 1000);\r\n    }\r\n    reset() {\r\n        this.setState({ secs: 0 });\r\n    }\r\n}\r\n\r\nclass GameBox {\r\n\r\n    constructor(xValue, yValue, directionValue, distanceValue, colorValue) {\r\n        this.x = xValue;\r\n        this.y = yValue;\r\n        this.dir = directionValue;\r\n        this.distance = distanceValue;\r\n        this.hitBottom = false;\r\n        this.old = [];\r\n        this.rotation = rotationType.AXIS;\r\n        this.color = colorValue;\r\n    }\r\n\r\n    move(command) {\r\n        if (this.hitBottom) {\r\n            return;\r\n        }\r\n        if (command === movement.DOWN) {\r\n            this.y++;\r\n        } else if (command === movement.LEFT) {\r\n            this.x--;\r\n        } else if (command === movement.RIGHT) {\r\n            this.x++;\r\n        }\r\n    }\r\n\r\n    rotate() {\r\n        if (this.distance === 0 || this.hitBottom) {\r\n            return;\r\n        }\r\n        switch (this.rotation) {\r\n            case rotationType.DIAGONAL:\r\n                this.rotateDiagonal();\r\n                break;\r\n            default:\r\n                this.rotateAxis();\r\n                break;\r\n        }\r\n    }\r\n\r\n    rotateAxis() {\r\n        switch (this.dir) {\r\n            case direction.SOUTH:\r\n                this.x = this.x + this.distance;\r\n                this.y = this.y - this.distance;\r\n                this.dir = direction.EAST;\r\n                break;\r\n            case direction.EAST:\r\n                this.x = this.x - this.distance;\r\n                this.y = this.y - this.distance;\r\n                this.dir = direction.NORTH;\r\n                break;\r\n            case direction.NORTH:\r\n                this.x = this.x - this.distance;\r\n                this.y = this.y + this.distance;\r\n                this.dir = direction.WEST;\r\n                break;\r\n            default:\r\n                this.x = this.x + this.distance;\r\n                this.y = this.y + this.distance;\r\n                this.dir = direction.SOUTH;\r\n                break;\r\n        }\r\n    }\r\n\r\n    rotateDiagonal() {\r\n        switch (this.dir) {\r\n            case direction.SOUTH:\r\n                this.x = this.x + this.distance * 2;\r\n                this.dir = direction.EAST;\r\n                break;\r\n            case direction.EAST:\r\n                this.y = this.y - this.distance * 2;\r\n                this.dir = direction.NORTH;\r\n                break;\r\n            case direction.NORTH:\r\n                this.x = this.x - this.distance * 2;\r\n                this.dir = direction.WEST;\r\n                break;\r\n            default:\r\n                this.y = this.y + this.distance * 2;\r\n                this.dir = direction.SOUTH;\r\n                break;\r\n        }\r\n    }\r\n\r\n    clone() {\r\n        const newBox = new GameBox(this.x, this.y, this.dir, this.distance, this.color);\r\n        newBox.hitBottom = this.hitBottom;\r\n        newBox.old = this;\r\n        newBox.rotation = this.rotation;\r\n        return newBox;\r\n    }\r\n}\r\n\r\nclass Square extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: null,\r\n            active: false,\r\n            bottom: false,\r\n            style: defaultSquareClass + \" \" + colors.BLANK,\r\n            coordinatex: this.props.coordinatex,\r\n            coordinatey: this.props.coordinatey,\r\n        };\r\n    }\r\n    render() {\r\n        return (<button\r\n            id={this.props.id}\r\n            className={this.state.style}>\r\n            {this.state.value}\r\n        </button>);\r\n    }\r\n}\r\n\r\n\r\nclass RichardsMiniGame extends Component {\r\n    constructor() {\r\n        super();\r\n        this.RichardsMiniGame = [];\r\n        this.InformationBoard_ref = React.createRef();\r\n        this.state = { boxes: [], Points: 0, Time: 0, gameEndText: \"No text inside\" };\r\n        ArrowKeysReact.config({\r\n            left: () => {\r\n                this.updateMoveLeft();\r\n            },\r\n            right: () => {\r\n                this.updateMoveRight();\r\n            },\r\n            up: () => {\r\n                this.updateRotate();\r\n            },\r\n            down: () => {\r\n                this.updateMoveDown();\r\n            }\r\n        });\r\n        for (let x = 0; x < Board_WIDTH; x++) {\r\n            let rowRefs = [];\r\n            for (let y = 0; y < Board_HEIGHT; y++) {\r\n                rowRefs.push(React.createRef());\r\n            }\r\n            this.RichardsMiniGame.push(rowRefs);\r\n        }\r\n    }\r\n    render() {\r\n        let RichardsMiniGame = [];\r\n        for (let y = 0; y < Board_HEIGHT; y++) {\r\n            let row = []\r\n            for (let x = 0; x < Board_WIDTH; x++) {\r\n                row.push(<Square ref={this.RichardsMiniGame[x][y]} id={x + \"-\" + y} coordinatex={x} coordinatey={y} />);\r\n            }\r\n            RichardsMiniGame.push(<div className=\"Board-row\">{row}</div>)\r\n        }\r\n        return (\r\n            <div className=\"body-game\">\r\n                <div className=\"Pannel\">\r\n                    <input {...ArrowKeysReact.events} tabIndex=\"1\" type=\"button\" value=\"Start\" onClick={() => {\r\n                        this.updateAddShape(this.createRandomShape());\r\n                        this.InformationBoard_ref.current.time_ref.current.start();\r\n                    }} />\r\n                    <input type=\"button\" value=\"Game End\" onClick={() => {\r\n                        this.InformationBoard_ref.current.time_ref.current.setState({gamestatus : false});\r\n                        this.gameEnd();\r\n                    }} />\r\n                </div>\r\n                <InformationBoard ref={this.InformationBoard_ref}/>\r\n                <div className=\"Board-screen\">\r\n                    <header className=\"Board-game\">\r\n                        {RichardsMiniGame}\r\n                    </header>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    initBoardLogic() {\r\n        // inits the two dimensional game board array\r\n        let newBoard = [];\r\n        for (let i = 0; i < Board_WIDTH; i++) {\r\n            newBoard[i] = [];\r\n            newBoard[i][Board_HEIGHT] = null;\r\n            newBoard[i].pop();\r\n        }\r\n        return newBoard;\r\n    }\r\n\r\n    addBoxesToBoard(board, boxes) {\r\n        for (let i = 0; i < boxes.length; i++) {\r\n            const box = boxes[i];\r\n            board[box.x][box.y] = box;\r\n        }\r\n    }\r\n\r\n    getRandomInt(min, max) {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n\r\n    createRandomShape() {\r\n        const rand = this.getRandomInt(0, 5);\r\n        switch (rand) {\r\n            case 0:\r\n                return this.createIshape();\r\n            case 1:\r\n                return this.createJshape();\r\n            case 2:\r\n                return this.createLshape();\r\n            case 3:\r\n                return this.createOshape();\r\n            case 4:\r\n                return this.createSshape();\r\n            case 5:\r\n                return this.createTshape();\r\n            default:\r\n                return this.createOshape();\r\n        }\r\n\r\n    }\r\n\r\n    createIshape() {\r\n        let newShape = [];\r\n        newShape.push(new GameBox(4, 1, direction.NORTH, 1, colors.I));\r\n        newShape.push(new GameBox(4, 2, direction.NORTH, 0, colors.I));\r\n        newShape.push(new GameBox(4, 3, direction.SOUTH, 1, colors.I));\r\n        newShape.push(new GameBox(4, 4, direction.SOUTH, 2, colors.I));\r\n        return newShape;\r\n    }\r\n\r\n    createJshape() {\r\n        let newShape = [];\r\n        newShape.push(new GameBox(5, 2, direction.EAST, 1, colors.J));\r\n        newShape.push(new GameBox(4, 2, direction.NORTH, 0, colors.J));\r\n        newShape.push(new GameBox(4, 3, direction.SOUTH, 1, colors.J));\r\n        newShape.push(new GameBox(4, 4, direction.SOUTH, 2, colors.J));\r\n        return newShape;\r\n    }\r\n\r\n    createTshape() {\r\n        let newShape = [];\r\n        newShape.push(new GameBox(4, 1, direction.NORTH, 1, colors.T));\r\n        newShape.push(new GameBox(4, 2, direction.NORTH, 0, colors.T));\r\n        newShape.push(new GameBox(4, 3, direction.SOUTH, 1, colors.T));\r\n        newShape.push(new GameBox(5, 2, direction.EAST, 1, colors.T));\r\n        return newShape;\r\n    }\r\n\r\n    createLshape() {\r\n        let newShape = [];\r\n        newShape.push(new GameBox(3, 2, direction.WEST, 1, colors.L));\r\n        newShape.push(new GameBox(4, 2, direction.NORTH, 0, colors.L));\r\n        newShape.push(new GameBox(4, 3, direction.SOUTH, 1, colors.L));\r\n        newShape.push(new GameBox(4, 4, direction.SOUTH, 2, colors.L));\r\n        return newShape;\r\n    }\r\n\r\n    createSshape() {\r\n        let newShape = [];\r\n        newShape.push(new GameBox(5, 2, direction.EAST, 1, colors.S));\r\n        newShape.push(new GameBox(4, 2, direction.NORTH, 0, colors.S));\r\n        newShape.push(new GameBox(4, 3, direction.SOUTH, 1, colors.S));\r\n        const box = new GameBox(3, 3, direction.SOUTH, 1, colors.S);\r\n        box.rotation = rotationType.DIAGONAL;\r\n        newShape.push(box);\r\n        return newShape;\r\n    }\r\n\r\n    createOshape() {\r\n        let newShape = [];\r\n        newShape.push(new GameBox(5, 2, direction.SOUTH, 0, colors.O));\r\n        newShape.push(new GameBox(4, 2, direction.SOUTH, 0, colors.O));\r\n        newShape.push(new GameBox(4, 3, direction.SOUTH, 0, colors.O));\r\n        newShape.push(new GameBox(5, 3, direction.SOUTH, 0, colors.O));\r\n        return newShape;\r\n    }\r\n\r\n    addHitBottomBoxesToBoard(gameboard, boxes) {\r\n        for (let i = 0; i < boxes.length; i++) {\r\n            const box = boxes[i];\r\n            if (box.hitBottom) {\r\n                gameboard[box.x][box.y] = box;\r\n            }\r\n        }\r\n    }\r\n\r\n    doAction(child, command) {\r\n        if (command === null) {\r\n            child.rotate();\r\n        } else {\r\n            child.move(command);\r\n        }\r\n    }\r\n\r\n    hitBottomDetection(gameboard, newChildren, boxes) {\r\n        let bottomHit = this.hitBottomCheck(gameboard, newChildren);\r\n        if (bottomHit) {\r\n            this.markAllAsBottomHit(newChildren);\r\n            //Create new Random Shape on the Platform\r\n            const newBoxes = this.createRandomShape();\r\n            this.addNewBoxesToBoxes(boxes, newBoxes);\r\n            this.addBoxesToBoard(gameboard, newBoxes);\r\n        }\r\n    }\r\n\r\n    hitBottomCheck(gameboard, boxes) {\r\n        for (let i = 0; i < boxes.length; i++) {\r\n            const box = boxes[i];\r\n            // if the clone hits the bottom or the next boxs is already on the bottom \r\n            if (box.y === Board_HEIGHT - 1 || (gameboard[box.x][box.y + 1] != null && gameboard[box.x][box.y + 1].hitBottom)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    evaluate(command, boxes) {\r\n        let actionSuccess = true;\r\n        let newChildren = [];\r\n        let gameboard = this.initBoardLogic();\r\n        this.addHitBottomBoxesToBoard(gameboard, boxes);\r\n        for (let i = 0; i < boxes.length; i++) {\r\n            const box = boxes[i];\r\n            // do not evaluate if is already evaluated\r\n            if (box.hitBottom) {\r\n                continue;\r\n            }\r\n            const childClone = box.clone();\r\n            this.doAction(childClone, command);\r\n\r\n            // if the clone hit something or is out of bounds\r\n            if (childClone.x < 0 || childClone.y < 0 || childClone.x === Board_WIDTH || gameboard[childClone.x][childClone.y] != null) {\r\n                actionSuccess = false;\r\n                break;\r\n            }\r\n\r\n            // Mark as evaluated and remember in array\r\n            newChildren.push(childClone);\r\n            gameboard[childClone.x][childClone.y] = childClone;\r\n        }\r\n\r\n        // if evaluation failed, do nothing\r\n        if (actionSuccess === false) {\r\n            gameboard = this.initBoardLogic();\r\n            this.addBoxesToBoard(gameboard, boxes);\r\n            return gameboard;\r\n        }\r\n        this.hitBottomDetection(gameboard, newChildren, boxes);\r\n        this.overrideOriginalsWithValues(newChildren);\r\n        return gameboard;\r\n    }\r\n\r\n    markAllAsBottomHit(newChildren) {\r\n        for (let j = 0; j < newChildren.length; j++) {\r\n            newChildren[j].hitBottom = true;\r\n        }\r\n    }\r\n\r\n    overrideOriginalsWithValues(newChildren) {\r\n        // update values of the old boxes with the new values from the evaluation\r\n        for (let j = 0; j < newChildren.length; j++) {\r\n            const newChild = newChildren[j];\r\n            const oldChild = newChild.old;\r\n            oldChild.x = newChild.x;\r\n            oldChild.y = newChild.y;\r\n            oldChild.hitBottom = newChild.hitBottom;\r\n            oldChild.dir = newChild.dir;\r\n        }\r\n    }\r\n\r\n    updateAddShape(boxes) {\r\n        this.update(null, boxes);\r\n    }\r\n\r\n    updateMoveRight() {\r\n        this.update(movement.RIGHT, null);\r\n    }\r\n\r\n    updateMoveLeft() {\r\n        this.update(movement.LEFT, null);\r\n    }\r\n\r\n    updateRotate() {\r\n        this.update(null, null);\r\n    }\r\n\r\n    updateMoveDown() {\r\n        this.update(movement.DOWN, null);\r\n    }\r\n\r\n    update(command, newBoxes) {\r\n\r\n        let boxes = this.state.boxes;\r\n        let newBoard;\r\n        if (newBoxes != null) {\r\n            this.addNewBoxesToBoxes(boxes, newBoxes);\r\n            newBoard = this.initBoardLogic();\r\n            this.addBoxesToBoard(newBoard, boxes);\r\n        } else {\r\n            newBoard = this.evaluate(command, boxes);\r\n        }\r\n        for (let x = 0; x < newBoard.length; x++) {\r\n            const column = newBoard[x];\r\n            for (let y = 0; y < column.length; y++) {\r\n                const cell = column[y];\r\n                if (cell != null) {\r\n                    this.activateSquare(x, y, cell.color);\r\n                } else {\r\n                    this.deactivateSqare(x, y);\r\n                }\r\n            }\r\n        }\r\n        this.setState({ boxes: boxes });\r\n    }\r\n\r\n    addNewBoxesToBoxes(boxes, newBoxes) {\r\n        for (let i = 0; i < newBoxes.length; i++) {\r\n            const element = newBoxes[i];\r\n            boxes.push(element);\r\n        }\r\n    }\r\n\r\n    activateSquare(x, y, style) {\r\n        this.RichardsMiniGame[x][y].current.setState({ style: defaultSquareClass + \" \" + style });\r\n    }\r\n\r\n    deactivateSqare(x, y) {\r\n        this.RichardsMiniGame[x][y].current.setState({ style: defaultSquareClass + \" \" + colors.BLANK });\r\n    }\r\n\r\n    openPopup() {\r\n        //Popup\r\n        openPopup(this.state.gameEndText + \" You reached \" + this.state.Points + \" Points in \" + this.InformationBoard_ref.current.time_ref.current.state.secs + \" Seconds!\",\r\n            [[\"Want to play another round?\", () => {\r\n                //Set up new Game\r\n                for (let x = 0; x < Board_WIDTH; x++) {\r\n                    for (let y = 0; y < Board_HEIGHT; y++) {\r\n                        this.deactivateSqare(x, y);\r\n                    }\r\n                }\r\n                //Set all State of the beginning Value and Close Popup\r\n                this.setState({ Time: 0, Points: 0, gameEndText: \"\" }, () => ReactDOM.unmountComponentAtNode(document.getElementById('popup_container')));\r\n            }]], true);\r\n    }\r\n    gameEnd() {\r\n        if (this.state.Points == 0) {\r\n            this.setState({ gameEndText: \"Do you know how to play the game? Loser!\" }, () => this.openPopup());\r\n        }\r\n        else if (this.state.Points <= 10) {\r\n            this.setState({ gameEndText: \"Good\" }, () => this.openPopup());\r\n        }\r\n        else if (this.state.Points < 20 && this.state.Points > 10) {\r\n            this.setState({ gameEndText: \"Well done, are you cheating ?\" }, () => this.openPopup());\r\n        }\r\n        else {\r\n            this.setState({ gameEndText: \"You are ready for the World Championsship !\" }, () => this.openPopup());\r\n        }\r\n\r\n    }\r\n}\r\nexport default RichardsMiniGame;","import React, { Component } from 'react';\r\nimport PaulsMiniGame from './Paul/PaulsMiniGame';\r\nimport './Paul/PaulsMiniGame.css';\r\nimport ValesMiniGame from './Vale/ValesMiniGame'\r\nimport './Vale/ValesMiniGame.css';\r\nimport MarkusMiniGame from './Markus/components/game';\r\n\r\nimport '../node_modules/grommet-css';\r\nimport {Tabs, Tab} from 'grommet';\r\nimport RichardsMiniGame from './Richard/RichardsMiniGame';\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super();\r\n        this.store = {vale: {scoreboard_entries: null}};\r\n    }\r\n    render() {\r\n        return (\r\n            <Tabs id=\"Tabbar\" responsive={false} >\r\n                <Tab title=\"Vale\">\r\n                    <ValesMiniGame parent={this}/>\r\n                </Tab>\r\n                <Tab title=\"Markus\">\r\n                    <MarkusMiniGame />\r\n                </Tab>\r\n                <Tab title=\"Richard\">\r\n                    <RichardsMiniGame />\r\n                </Tab>\r\n                <Tab title=\"Paul\">\r\n                    <PaulsMiniGame  />\r\n                </Tab>\r\n            </Tabs>\r\n        );\r\n    }\r\n}\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}